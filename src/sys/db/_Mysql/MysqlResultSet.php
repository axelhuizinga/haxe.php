<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace sys\db\_Mysql;

use \php\_Boot\HxAnon;
use \php\Boot;
use \sys\db\ResultSet;
use \haxe\ds\List_hx;

class MysqlResultSet implements ResultSet {
	/**
	 * @var string
	 */
	static public $hxAnonClassName;

	/**
	 * @var mixed
	 */
	public $fetchedRow;
	/**
	 * @var mixed
	 */
	public $fieldsInfo;
	/**
	 * @var int
	 */
	public $length;
	/**
	 * @var int
	 */
	public $nfields;
	/**
	 * @var \Myslqi_result
	 */
	public $result;

	/**
	 * @param \Myslqi_result $result
	 * 
	 * @return void
	 */
	public function __construct ($result) {
		$this->result = $result;
	}

	/**
	 * @param mixed $row
	 * 
	 * @return mixed
	 */
	public function correctArrayTypes ($row) {
		$_gthis = $this;
		$_gthis1 = $this;
		if ($this->fieldsInfo === null) {
			$this->fieldsInfo = [];
			$collection = $this->result->fetch_fields();
			foreach ($collection as $key => $value) {
				$_gthis1->fieldsInfo[$value->name] = $value;
			}
		}
		$fieldsInfo = $this->fieldsInfo;
		foreach ($row as $key => $value) {
			$row[$key] = $_gthis->correctType($value, $fieldsInfo[$key]->type);
		}
		return $row;
	}

	/**
	 * @param object $row
	 * 
	 * @return object
	 */
	public function correctObjectTypes ($row) {
		$_gthis = $this;
		$_gthis1 = $this;
		if ($this->fieldsInfo === null) {
			$this->fieldsInfo = [];
			$collection = $this->result->fetch_fields();
			foreach ($collection as $key => $value) {
				$_gthis1->fieldsInfo[$value->name] = $value;
			}
		}
		$fieldsInfo = $this->fieldsInfo;
		foreach ($row as $key => $value) {
			$value1 = $value;
			$value1 = $_gthis->correctType($value, $fieldsInfo[$key]->type);
			$row->{$key} = $value1;
		}
		return $row;
	}

	/**
	 * @param string $value
	 * @param int $type
	 * 
	 * @return mixed
	 */
	public function correctType ($value, $type) {
		if ($value === null) {
			return null;
		}
		if (($type === \MYSQLI_TYPE_BIT) || ($type === \MYSQLI_TYPE_TINY) || ($type === \MYSQLI_TYPE_SHORT) || ($type === \MYSQLI_TYPE_LONG) || ($type === \MYSQLI_TYPE_INT24) || ($type === \MYSQLI_TYPE_CHAR)) {
			return (int)($value);
		}
		if (($type === \MYSQLI_TYPE_DECIMAL) || ($type === \MYSQLI_TYPE_NEWDECIMAL) || ($type === \MYSQLI_TYPE_FLOAT) || ($type === \MYSQLI_TYPE_DOUBLE)) {
			return (float)($value);
		}
		return $value;
	}

	/**
	 * @return void
	 */
	public function fetchNext () {
		$row = $this->result->fetch_assoc();
		if ($row !== null) {
			$this->fetchedRow = $this->correctArrayTypes($row);
		}
	}

	/**
	 * @return mixed
	 */
	public function getFieldsInfo () {
		$_gthis = $this;
		if ($this->fieldsInfo === null) {
			$this->fieldsInfo = [];
			$collection = $this->result->fetch_fields();
			foreach ($collection as $key => $value) {
				$_gthis->fieldsInfo[$value->name] = $value;
			}
		}
		return $this->fieldsInfo;
	}

	/**
	 * @return \Array_hx
	 */
	public function getFieldsNames () {
		$fields = $this->result->fetch_fields();
		$_g = new \Array_hx();
		$_g1_current = 0;
		$_g1_length = \count($fields);
		while ($_g1_current < $_g1_length) {
			$field = $fields[$_g1_current++];
			$_g->arr[$_g->length++] = $field->name;
		}
		return $_g;
	}

	/**
	 * @param int $n
	 * 
	 * @return float
	 */
	public function getFloatResult ($n) {
		return (float)($this->getResult($n));
	}

	/**
	 * @param int $n
	 * 
	 * @return int
	 */
	public function getIntResult ($n) {
		return (int)($this->getResult($n));
	}

	/**
	 * @param int $n
	 * 
	 * @return string
	 */
	public function getResult ($n) {
		if ($this->fetchedRow === null) {
			$this->fetchNext();
		}
		return \array_values($this->fetchedRow)[$n];
	}

	/**
	 * @return int
	 */
	public function get_length () {
		return $this->result->num_rows;
	}

	/**
	 * @return int
	 */
	public function get_nfields () {
		return $this->result->field_count;
	}

	/**
	 * @return bool
	 */
	public function hasNext () {
		if ($this->fetchedRow === null) {
			$this->fetchNext();
		}
		return $this->fetchedRow !== null;
	}

	/**
	 * @return mixed
	 */
	public function next () {
		if ($this->fetchedRow === null) {
			$this->fetchNext();
		}
		return $this->withdrawFetched();
	}

	/**
	 * @return List_hx
	 */
	public function results () {
		$list = new List_hx();
		$this->result->data_seek(0);
		$row = $this->result->fetch_object(MysqlResultSet::$hxAnonClassName);
		while ($row !== null) {
			$row = $this->correctObjectTypes($row);
			$list->add($row);
			$row = $this->result->fetch_object(MysqlResultSet::$hxAnonClassName);
		}
		return $list;
	}

	/**
	 * @return mixed
	 */
	public function withdrawFetched () {
		if ($this->fetchedRow === null) {
			return null;
		}
		$row = $this->fetchedRow;
		$this->fetchedRow = null;
		return new HxAnon($row);
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$hxAnonClassName = Boot::getClass(HxAnon::class)->phpClassName;
	}
}

Boot::registerClass(MysqlResultSet::class, 'sys.db._Mysql.MysqlResultSet');
Boot::registerGetters('sys\\db\\_Mysql\\MysqlResultSet', [
	'nfields' => true,
	'length' => true
]);
MysqlResultSet::__hx__init();
