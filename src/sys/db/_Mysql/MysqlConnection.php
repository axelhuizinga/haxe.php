<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace sys\db\_Mysql;

use \php\Boot;
use \haxe\Exception;
use \sys\db\Connection;
use \sys\db\ResultSet;
use \php\_Boot\HxString;

class MysqlConnection implements Connection {
	/**
	 * @var \Mysqli
	 */
	public $db;

	/**
	 * @param object $params
	 * 
	 * @return void
	 */
	public function __construct ($params) {
		if ($params->port === null) {
			$params->port = \Std::parseInt(\ini_get("mysqli.default_port"));
		}
		if ($params->socket === null) {
			$params->socket = \ini_get("mysqli.default_socket");
		}
		if ($params->database === null) {
			$params->database = "";
		}
		$this->db = new \Mysqli($params->host, $params->user, $params->pass, $params->database, $params->port, $params->socket);
	}

	/**
	 * @param \StringBuf $s
	 * @param mixed $v
	 * 
	 * @return void
	 */
	public function addValue ($s, $v) {
		if (\is_int($v) || \is_null($v)) {
			$s->add($v);
		} else if (\is_bool($v)) {
			$s->add(($v ? 1 : 0));
		} else {
			$s->add($this->quote(\Std::string($v)));
		}
	}

	/**
	 * @return void
	 */
	public function close () {
		$this->db->close();
	}

	/**
	 * @return void
	 */
	public function commit () {
		if (!$this->db->commit()) {
			throw Exception::thrown("Failed to commit transaction: " . ($this->db->error??'null'));
		}
	}

	/**
	 * @return string
	 */
	public function dbName () {
		return "MySQL";
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	public function escape ($s) {
		return $this->db->escape_string($s);
	}

	/**
	 * @return int
	 */
	public function lastInsertId () {
		return $this->db->insert_id;
	}

	/**
	 * @param string $s
	 * 
	 * @return string
	 */
	public function quote ($s) {
		if (HxString::indexOf($s, "\x00") >= 0) {
			return "x'" . (\bin2hex($s)??'null') . "'";
		}
		return "'" . ($this->db->escape_string($s)??'null') . "'";
	}

	/**
	 * @param string $s
	 * 
	 * @return ResultSet
	 */
	public function request ($s) {
		$result = $this->db->query($s);
		if ($result === false) {
			throw Exception::thrown("Failed to perform db query: " . ($this->db->error??'null'));
		}
		if ($result === true) {
			return new WriteMysqlResultSet($this->db->affected_rows);
		}
		return new MysqlResultSet($result);
	}

	/**
	 * @return void
	 */
	public function rollback () {
		if (!$this->db->rollback()) {
			throw Exception::thrown("Failed to rollback transaction: " . ($this->db->error??'null'));
		}
	}

	/**
	 * @return void
	 */
	public function startTransaction () {
		if (!$this->db->begin_transaction()) {
			throw Exception::thrown("Failed to start transaction: " . ($this->db->error??'null'));
		}
	}
}

Boot::registerClass(MysqlConnection::class, 'sys.db._Mysql.MysqlConnection');
