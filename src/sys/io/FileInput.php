<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace sys\io;

use \haxe\io\_BytesData\Container;
use \php\Boot;
use \haxe\Exception;
use \haxe\io\Eof;
use \haxe\io\Error;
use \haxe\io\Input;
use \haxe\io\Bytes;

/**
 * Use `sys.io.File.read` to create a `FileInput`.
 */
class FileInput extends Input {
	/**
	 * @var mixed
	 */
	public $__f;

	/**
	 * @param mixed $f
	 * 
	 * @return void
	 */
	public function __construct ($f) {
		$this->__f = $f;
	}

	/**
	 * @return void
	 */
	public function close () {
		parent::close();
		if ($this->__f !== null) {
			\fclose($this->__f);
		}
	}

	/**
	 * @return bool
	 */
	public function eof () {
		return \feof($this->__f);
	}

	/**
	 * @return int
	 */
	public function readByte () {
		$r = \fread($this->__f, 1);
		if (\feof($this->__f)) {
			throw Exception::thrown(new Eof());
		}
		if ($r === false) {
			throw Exception::thrown(Error::Custom("An error occurred"));
		}
		return \ord($r);
	}

	/**
	 * @param Bytes $s
	 * @param int $p
	 * @param int $l
	 * 
	 * @return int
	 */
	public function readBytes ($s, $p, $l) {
		if (\feof($this->__f)) {
			throw Exception::thrown(new Eof());
		}
		$r = \fread($this->__f, $l);
		if ($r === false) {
			throw Exception::thrown(Error::Custom("An error occurred"));
		}
		if (\strlen($r) === 0) {
			throw Exception::thrown(new Eof());
		}
		$b = \strlen($r);
		$b1 = new Bytes($b, new Container($r));
		$len = \strlen($r);
		if (($p < 0) || ($len < 0) || (($p + $len) > $s->length) || ($len > $b1->length)) {
			throw Exception::thrown(Error::OutsideBounds());
		} else {
			$this1 = $s->b;
			$src = $b1->b;
			$this1->s = ((\substr($this1->s, 0, $p) . \substr($src->s, 0, $len)) . \substr($this1->s, $p + $len));
		}
		return \strlen($r);
	}

	/**
	 * @return string
	 */
	public function readLine () {
		$r = \fgets($this->__f);
		if (false === $r) {
			throw Exception::thrown(new Eof());
		}
		return \rtrim($r, "\x0D\x0A");
	}

	/**
	 * @param int $p
	 * @param FileSeek $pos
	 * 
	 * @return void
	 */
	public function seek ($p, $pos) {
		$w = null;
		$__hx__switch = ($pos->index);
		if ($__hx__switch === 0) {
			$w = \SEEK_SET;
		} else if ($__hx__switch === 1) {
			$w = \SEEK_CUR;
		} else if ($__hx__switch === 2) {
			$w = \SEEK_END;
		}
		if (\fseek($this->__f, $p, $w) === -1) {
			throw Exception::thrown(Error::Custom("An error occurred"));
		}
	}

	/**
	 * @return int
	 */
	public function tell () {
		$r = \ftell($this->__f);
		if ($r === false) {
			throw Exception::thrown(Error::Custom("An error occurred"));
		}
		return $r;
	}
}

Boot::registerClass(FileInput::class, 'sys.io.FileInput');
