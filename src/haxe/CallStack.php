<?php
/**
 * Generated by Haxe 4.0.5
 */

namespace haxe;

use \php\Boot;
use \php\_Boot\HxString;

class CallStack {
	/**
	 * @var mixed
	 */
	static public $lastExceptionTrace;
	/**
	 * @var \Closure
	 * If defined this function will be used to transform call stack entries.
	 * @param String - generated php file name.
	 * @param Int - Line number in generated file.
	 */
	static public $mapPosition;

	/**
	 * @return \Array_hx
	 */
	public static function callStack () {
		return CallStack::makeStack(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS));
	}

	/**
	 * @return \Array_hx
	 */
	public static function exceptionStack () {
		$tmp = null;
		if (CallStack::$lastExceptionTrace === null) {
			$this1 = [];
			$tmp = $this1;
		} else {
			$tmp = CallStack::$lastExceptionTrace;
		}
		return CallStack::makeStack($tmp);
	}

	/**
	 * @param \StringBuf $b
	 * @param StackItem $s
	 * 
	 * @return void
	 */
	public static function itemToString ($b, $s) {
		$__hx__switch = ($s->index);
		if ($__hx__switch === 0) {
			$b->add("a C function");
		} else if ($__hx__switch === 1) {
			$m = $s->params[0];
			$b->add("module ");
			$b->add($m);

		} else if ($__hx__switch === 2) {
			$_g3 = $s->params[3];
			$line = $s->params[2];
			$file = $s->params[1];
			$s1 = $s->params[0];
			if ($s1 !== null) {
				CallStack::itemToString($b, $s1);
				$b->add(" (");
			}
			$b->add($file);
			$b->add(" line ");
			$b->add($line);
			if ($s1 !== null) {
				$b->add(")");
			}


		} else if ($__hx__switch === 3) {
			$meth = $s->params[1];
			$cname = $s->params[0];
			$b->add(($cname === null ? "<unknown>" : $cname));
			$b->add(".");
			$b->add($meth);

		} else if ($__hx__switch === 4) {
			$n = $s->params[0];
			$b->add("local function");
		}
	}

	/**
	 * @param mixed $native
	 * 
	 * @return \Array_hx
	 */
	public static function makeStack ($native) {
		$result = new \Array_hx();
		$count = count($native);
		$_g = 0;
		$_g1 = $count;
		while ($_g < $_g1) {
			$i = $_g++;
			$entry = $native[$i];
			$item = null;
			if (($i + 1) < $count) {
				$next = $native[$i + 1];
				if (!isset($next["function"])) {
					$next["function"] = "";
				}
				if (!isset($next["class"])) {
					$next["class"] = "";
				}
				if (HxString::indexOf($next["function"], "{closure}") >= 0) {
					$item = StackItem::LocalFunction();
				} else if ((strlen($next["class"]) > 0) && (strlen($next["function"]) > 0)) {
					$cls = Boot::getClassName($next["class"]);
					$item = StackItem::Method($cls, $next["function"]);
				}
			}
			if (isset($entry["file"])) {
				if (CallStack::$mapPosition !== null) {
					$pos = (CallStack::$mapPosition)($entry["file"], $entry["line"]);
					if (($pos !== null) && ($pos->source !== null) && ($pos->originalLine !== null)) {
						$entry["file"] = $pos->source;
						$entry["line"] = $pos->originalLine;
					}
				}
				$result->arr[$result->length] = StackItem::FilePos($item, $entry["file"], $entry["line"]);
				++$result->length;

			} else if ($item !== null) {
				$result->arr[$result->length] = $item;
				++$result->length;
			}
		}

		return $result;
	}

	/**
	 * @param \Throwable $e
	 * 
	 * @return void
	 */
	public static function saveExceptionTrace ($e) {
		CallStack::$lastExceptionTrace = $e->getTrace();
		$currentTrace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);
		$count = count($currentTrace);
		$_g = -($count - 1);
		$_g1 = 1;
		while ($_g < $_g1) {
			$i = $_g++;
			$exceptionEntry = end(CallStack::$lastExceptionTrace);
			if (!isset($exceptionEntry["file"]) || !isset($currentTrace[-$i]["file"])) {
				array_pop(CallStack::$lastExceptionTrace);
			} else if (Boot::equal($currentTrace[-$i]["file"], $exceptionEntry["file"]) && Boot::equal($currentTrace[-$i]["line"], $exceptionEntry["line"])) {
				array_pop(CallStack::$lastExceptionTrace);
			} else {
				break;
			}
		}

		$count1 = count(CallStack::$lastExceptionTrace);
		$_g2 = 0;
		$_g3 = $count1;
		while ($_g2 < $_g3) {
			$i1 = $_g2++;
			$this1 = [];
			CallStack::$lastExceptionTrace[$i1]["args"] = $this1;

		}

		$this2 = [];
		$thrownAt = $this2;
		$thrownAt["function"] = "";
		$thrownAt["line"] = $e->getLine();
		$thrownAt["file"] = $e->getFile();
		$thrownAt["class"] = "";
		$this3 = [];
		$thrownAt["args"] = $this3;

		array_unshift(CallStack::$lastExceptionTrace, $thrownAt);
	}

	/**
	 * @param \Array_hx $stack
	 * 
	 * @return string
	 */
	public static function toString ($stack) {
		$b = new \StringBuf();
		$_g = 0;
		while ($_g < $stack->length) {
			$s = ($stack->arr[$_g] ?? null);
			++$_g;
			$b->add("\x0ACalled from ");
			CallStack::itemToString($b, $s);
		}

		return $b->b;
	}
}

Boot::registerClass(CallStack::class, 'haxe.CallStack');
