<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace haxe\rtti;

use \php\Boot;
use \haxe\Exception;

/**
 * Rtti is a helper class which supplements the `@:rtti` metadata.
 * @see <https://haxe.org/manual/cr-rtti.html>
 */
class Rtti {
	/**
	 * Returns the `haxe.rtti.CType.Classdef` corresponding to class `c`.
	 * If `c` has no runtime type information, e.g. because no `@:rtti` was
	 * added, an exception of type `String` is thrown.
	 * If `c` is `null`, the result is unspecified.
	 * 
	 * @param Class $c
	 * 
	 * @return object
	 */
	public static function getRtti ($c) {
		$rtti = \Reflect::field($c, "__rtti");
		if ($rtti === null) {
			throw Exception::thrown("Class " . (\Type::getClassName($c)??'null') . " has no RTTI information, consider adding @:rtti");
		}
		$x = \Xml::parse($rtti)->firstElement();
		$infos = (new XmlParser())->processElement($x);
		if ($infos->index === 1) {
			return $infos->params[0];
		} else {
			throw Exception::thrown("Enum mismatch: expected TClassDecl but found " . (\Std::string($infos)??'null'));
		}
	}

	/**
	 * Tells if `c` has runtime type information.
	 * If `c` is `null`, the result is unspecified.
	 * 
	 * @param Class $c
	 * 
	 * @return bool
	 */
	public static function hasRtti ($c) {
		return \Lambda::has(\Type::getClassFields($c), "__rtti");
	}
}

Boot::registerClass(Rtti::class, 'haxe.rtti.Rtti');
