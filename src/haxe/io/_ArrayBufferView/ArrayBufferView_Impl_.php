<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace haxe\io\_ArrayBufferView;

use \php\Boot;
use \haxe\Exception;
use \haxe\io\Error;
use \haxe\io\Bytes;
use \haxe\io\ArrayBufferViewImpl;

final class ArrayBufferView_Impl_ {

	/**
	 * @param int $size
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function _new ($size) {
		return new ArrayBufferViewImpl(Bytes::alloc($size), 0, $size);
	}

	/**
	 * @param Bytes $bytes
	 * @param int $pos
	 * @param int $length
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function fromBytes ($bytes, $pos = 0, $length = null) {
		if ($pos === null) {
			$pos = 0;
		}
		if ($length === null) {
			$length = $bytes->length - $pos;
		}
		if (($pos < 0) || ($length < 0) || (($pos + $length) > $bytes->length)) {
			throw Exception::thrown(Error::OutsideBounds());
		}
		return new ArrayBufferViewImpl($bytes, $pos, $length);
	}

	/**
	 * @param ArrayBufferViewImpl $a
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function fromData ($a) {
		return $a;
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function getData ($this1) {
		return $this1;
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * 
	 * @return Bytes
	 */
	public static function get_buffer ($this1) {
		return $this1->bytes;
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * 
	 * @return int
	 */
	public static function get_byteLength ($this1) {
		return $this1->byteLength;
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * 
	 * @return int
	 */
	public static function get_byteOffset ($this1) {
		return $this1->byteOffset;
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * @param int $begin
	 * @param int $length
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function sub ($this1, $begin, $length = null) {
		return $this1->sub($begin, $length);
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * @param int $begin
	 * @param int $end
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function subarray ($this1, $begin = null, $end = null) {
		return $this1->subarray($begin, $end);
	}
}

Boot::registerClass(ArrayBufferView_Impl_::class, 'haxe.io._ArrayBufferView.ArrayBufferView_Impl_');
Boot::registerGetters('haxe\\io\\_ArrayBufferView\\ArrayBufferView_Impl_', [
	'byteLength' => true,
	'byteOffset' => true,
	'buffer' => true
]);
