<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace haxe\io\_UInt8Array;

use \php\Boot;
use \haxe\Exception;
use \haxe\io\Error;
use \haxe\io\_ArrayBufferView\ArrayBufferView_Impl_;
use \haxe\io\Bytes;
use \haxe\io\ArrayBufferViewImpl;

final class UInt8Array_Impl_ {
	/**
	 * @var int
	 */
	const BYTES_PER_ELEMENT = 1;


	/**
	 * @param int $elements
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function _new ($elements) {
		return new ArrayBufferViewImpl(Bytes::alloc($elements), 0, $elements);
	}

	/**
	 * @param \Array_hx $a
	 * @param int $pos
	 * @param int $length
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function fromArray ($a, $pos = 0, $length = null) {
		if ($pos === null) {
			$pos = 0;
		}
		if ($length === null) {
			$length = $a->length - $pos;
		}
		if (($pos < 0) || ($length < 0) || (($pos + $length) > $a->length)) {
			throw Exception::thrown(Error::OutsideBounds());
		}
		$elements = $a->length;
		$i = new ArrayBufferViewImpl(Bytes::alloc($elements), 0, $elements);
		$_g = 0;
		$_g1 = $length;
		while ($_g < $_g1) {
			$idx = $_g++;
			if (($idx >= 0) && ($idx < $i->byteLength)) {
				$i->bytes->b->s[$idx + $i->byteOffset] = \chr(($a->arr[$idx + $pos] ?? null));
			}
		}
		return $i;
	}

	/**
	 * @param Bytes $bytes
	 * @param int $bytePos
	 * @param int $length
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function fromBytes ($bytes, $bytePos = 0, $length = null) {
		if ($bytePos === null) {
			$bytePos = 0;
		}
		return UInt8Array_Impl_::fromData(ArrayBufferView_Impl_::fromBytes($bytes, $bytePos, $length));
	}

	/**
	 * @param ArrayBufferViewImpl $d
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function fromData ($d) {
		return $d;
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * @param int $index
	 * 
	 * @return int
	 */
	public static function get ($this1, $index) {
		return \ord($this1->bytes->b->s[$index + $this1->byteOffset]);
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function getData ($this1) {
		return $this1;
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * 
	 * @return int
	 */
	public static function get_length ($this1) {
		return $this1->byteLength;
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function get_view ($this1) {
		return $this1;
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * @param int $index
	 * @param int $value
	 * 
	 * @return int
	 */
	public static function set ($this1, $index, $value) {
		if (($index >= 0) && ($index < $this1->byteLength)) {
			$this1->bytes->b->s[$index + $this1->byteOffset] = \chr($value);
			return $value;
		}
		return 0;
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * @param int $begin
	 * @param int $length
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function sub ($this1, $begin, $length = null) {
		return UInt8Array_Impl_::fromData($this1->sub($begin, $length));
	}

	/**
	 * @param ArrayBufferViewImpl $this
	 * @param int $begin
	 * @param int $end
	 * 
	 * @return ArrayBufferViewImpl
	 */
	public static function subarray ($this1, $begin = null, $end = null) {
		return UInt8Array_Impl_::fromData($this1->subarray($begin, $end));
	}
}

Boot::registerClass(UInt8Array_Impl_::class, 'haxe.io._UInt8Array.UInt8Array_Impl_');
Boot::registerGetters('haxe\\io\\_UInt8Array\\UInt8Array_Impl_', [
	'view' => true,
	'length' => true
]);
