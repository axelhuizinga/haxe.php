<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace haxe\zip\_InflateImpl;

use \php\Boot;
use \haxe\Exception;
use \haxe\io\Error;
use \haxe\crypto\Adler32;
use \haxe\io\Bytes;

class Window {
	/**
	 * @var int
	 */
	const BUFSIZE = 65536;
	/**
	 * @var int
	 */
	const SIZE = 32768;

	/**
	 * @var Bytes
	 */
	public $buffer;
	/**
	 * @var Adler32
	 */
	public $crc;
	/**
	 * @var int
	 */
	public $pos;

	/**
	 * @param bool $hasCrc
	 * 
	 * @return void
	 */
	public function __construct ($hasCrc) {
		$this->buffer = Bytes::alloc(65536);
		$this->pos = 0;
		if ($hasCrc) {
			$this->crc = new Adler32();
		}
	}

	/**
	 * @param int $c
	 * 
	 * @return void
	 */
	public function addByte ($c) {
		if ($this->pos === 65536) {
			$this->slide();
		}
		$this->buffer->b->s[$this->pos] = \chr($c);
		$this->pos++;
	}

	/**
	 * @param Bytes $b
	 * @param int $p
	 * @param int $len
	 * 
	 * @return void
	 */
	public function addBytes ($b, $p, $len) {
		if (($this->pos + $len) > 65536) {
			$this->slide();
		}
		$_this = $this->buffer;
		$pos = $this->pos;
		if (($pos < 0) || ($p < 0) || ($len < 0) || (($pos + $len) > $_this->length) || (($p + $len) > $b->length)) {
			throw Exception::thrown(Error::OutsideBounds());
		} else {
			$this1 = $_this->b;
			$src = $b->b;
			$this1->s = ((\substr($this1->s, 0, $pos) . \substr($src->s, $p, $len)) . \substr($this1->s, $pos + $len));
		}
		$this->pos += $len;
	}

	/**
	 * @return int
	 */
	public function available () {
		return $this->pos;
	}

	/**
	 * @return Adler32
	 */
	public function checksum () {
		if ($this->crc !== null) {
			$this->crc->update($this->buffer, 0, $this->pos);
		}
		return $this->crc;
	}

	/**
	 * @return int
	 */
	public function getLastChar () {
		return \ord($this->buffer->b->s[$this->pos - 1]);
	}

	/**
	 * @return void
	 */
	public function slide () {
		if ($this->crc !== null) {
			$this->crc->update($this->buffer, 0, 32768);
		}
		$b = Bytes::alloc(65536);
		$this->pos -= 32768;
		$src = $this->buffer;
		$len = $this->pos;
		if (($len < 0) || ($len > $b->length) || ((32768 + $len) > $src->length)) {
			throw Exception::thrown(Error::OutsideBounds());
		} else {
			$this1 = $b->b;
			$src1 = $src->b;
			$this1->s = ((\substr($this1->s, 0, 0) . \substr($src1->s, 32768, $len)) . \substr($this1->s, $len));
		}
		$this->buffer = $b;
	}
}

Boot::registerClass(Window::class, 'haxe.zip._InflateImpl.Window');
