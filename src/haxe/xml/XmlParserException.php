<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace haxe\xml;

use \php\Boot;

class XmlParserException {
	/**
	 * @var int
	 */
	public $lineNumber;
	/**
	 * @var string
	 */
	public $message;
	/**
	 * @var int
	 */
	public $position;
	/**
	 * @var int
	 */
	public $positionAtLine;
	/**
	 * @var string
	 */
	public $xml;

	/**
	 * @param string $message
	 * @param string $xml
	 * @param int $position
	 * 
	 * @return void
	 */
	public function __construct ($message, $xml, $position) {
		$this->xml = $xml;
		$this->message = $message;
		$this->position = $position;
		$this->lineNumber = 1;
		$this->positionAtLine = 0;
		$_g = 0;
		while ($_g < $position) {
			$i = $_g++;
			$s = $xml;
			$c = ($i >= strlen($s) ? 0 : ord($s[$i]));
			if ($c === 10) {
				$this->lineNumber++;
				$this->positionAtLine = 0;
			} else if ($c !== 13) {
				$this->positionAtLine++;
			}
		}
	}

	/**
	 * @return string
	 */
	public function toString () {
		return (\Type::getClassName(\Type::getClass($this))??'null') . ": " . ($this->message??'null') . " at line " . ($this->lineNumber??'null') . " char " . ($this->positionAtLine??'null');
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(XmlParserException::class, 'haxe.xml.XmlParserException');
