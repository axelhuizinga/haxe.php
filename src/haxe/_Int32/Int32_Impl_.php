<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace haxe\_Int32;

use \php\Boot;

final class Int32_Impl_ {
	/**
	 * @var int
	 */
	static public $extraBits;

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function add ($a, $b) {
		return (($a + $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function addInt ($a, $b) {
		return (($a + $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $x
	 * 
	 * @return int
	 */
	public static function clamp ($x) {
		return ($x << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * 
	 * @return int
	 */
	public static function complement ($a) {
		return (~$a << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function intShl ($a, $b) {
		return ($a << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function intShr ($a, $b) {
		return (($a >> $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function intSub ($a, $b) {
		return (($a - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function mul ($a, $b) {
		return (($a * ($b & 65535) + ((($a * (Boot::shiftRightUnsigned($b, 16))) << 16 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function mulInt ($a, $b) {
		return Int32_Impl_::mul($a, $b);
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function negate ($this1) {
		return ((~$this1 + 1) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function or ($a, $b) {
		return (($a | $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function orInt ($a, $b) {
		return (($a | $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function postDecrement ($this1) {
		$ret = $this1--;
		$this1 = ($this1 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		return $ret;
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function postIncrement ($this1) {
		$ret = $this1++;
		$this1 = ($this1 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		return $ret;
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function preDecrement ($this1) {
		$this1 = (--$this1 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		return $this1;
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function preIncrement ($this1) {
		$this1 = (++$this1 << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		return $this1;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function shl ($a, $b) {
		return ($a << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function shlInt ($a, $b) {
		return ($a << $b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function shr ($a, $b) {
		return (($a >> $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function shrInt ($a, $b) {
		return (($a >> $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function sub ($a, $b) {
		return (($a - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function subInt ($a, $b) {
		return (($a - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $this
	 * 
	 * @return float
	 */
	public static function toFloat ($this1) {
		return $this1;
	}

	/**
	 * Compare `a` and `b` in unsigned mode.
	 * 
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function ucompare ($a, $b) {
		if ($a < 0) {
			if ($b < 0) {
				return ((((~$b << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits) - ((~$a << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits)) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
			} else {
				return 1;
			}
		}
		if ($b < 0) {
			return -1;
		} else {
			return (($a - $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
		}
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function xor ($a, $b) {
		return (($a ^ $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function xorInt ($a, $b) {
		return (($a ^ $b) << Int32_Impl_::$extraBits) >> Int32_Impl_::$extraBits;
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$extraBits = \PHP_INT_SIZE * 8 - 32;
	}
}

Boot::registerClass(Int32_Impl_::class, 'haxe._Int32.Int32_Impl_');
Int32_Impl_::__hx__init();
