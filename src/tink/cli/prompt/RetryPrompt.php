<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace tink\cli\prompt;

use \php\_Boot\HxAnon;
use \php\Boot;
use \tink\cli\Prompt;
use \tink\cli\PromptTypeBase;
use \tink\core\TypedError;
use \tink\core\Outcome;
use \tink\core\_Future\Future_Impl_;
use \tink\core\FutureObject;

class RetryPrompt implements Prompt {
	/**
	 * @var Prompt
	 */
	public $proxy;
	/**
	 * @var int
	 */
	public $trials;

	/**
	 * @param int $trials
	 * @param Prompt $proxy
	 * 
	 * @return void
	 */
	public function __construct ($trials, $proxy = null) {
		$this->trials = $trials;
		$this->proxy = ($proxy === null ? new SysPrompt() : $proxy);
	}

	/**
	 * @param string $v
	 * 
	 * @return FutureObject
	 */
	public function print ($v) {
		return $this->proxy->print($v);
	}

	/**
	 * @param string $v
	 * 
	 * @return FutureObject
	 */
	public function println ($v) {
		return $this->proxy->println($v);
	}

	/**
	 * @param PromptTypeBase $type
	 * 
	 * @return FutureObject
	 */
	public function prompt ($type) {
		$_gthis = $this;
		$__hx__switch = ($type->index);
		if ($__hx__switch === 0) {
			return $this->proxy->prompt($type);
		} else if ($__hx__switch === 1) {
			$c = $type->params[1];
			return Future_Impl_::async(function ($cb) use (&$c, &$_gthis, &$type) {
				$remaining = $_gthis->trials;
				$next = null;
				$next = function () use (&$next, &$c, &$_gthis, &$type, &$remaining, &$cb) {
					$remaining -= 1;
					$retry = function () use (&$next, &$remaining, &$cb) {
						if ($remaining > 0) {
							$next();
						} else {
							$cb(Outcome::Failure(new TypedError(null, "Maximum retries reached", new HxAnon([
								"fileName" => "tink/cli/prompt/RetryPrompt.hx",
								"lineNumber" => 36,
								"className" => "tink.cli.prompt.RetryPrompt",
								"methodName" => "prompt",
							]))));
						}
					};
					$_gthis->proxy->prompt($type)->handle(function ($o) use (&$c, &$retry, &$cb) {
						$__hx__switch = ($o->index);
						if ($__hx__switch === 0) {
							$_g = $o->params[0];
							if ($c->indexOf($_g) === -1) {
								$retry();
							} else {
								$cb(Outcome::Success($_g));
							}
						} else if ($__hx__switch === 1) {
							$retry();
						}
					});
				};
				$next();
			});
		} else if ($__hx__switch === 2) {
			return $this->proxy->prompt($type);
		}
	}
}

Boot::registerClass(RetryPrompt::class, 'tink.cli.prompt.RetryPrompt');
