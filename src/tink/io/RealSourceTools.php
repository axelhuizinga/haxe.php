<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace tink\io;

use \tink\chunk\ChunkObject;
use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\streams\_Stream\Stream_Impl_;
use \tink\io\_Source\Source_Impl_;
use \tink\streams\Single;
use \tink\core\TypedError;
use \tink\streams\StreamObject;
use \tink\io\_StreamParser\StreamParser_Impl_;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\core\_Promise\Next_Impl_;
use \tink\core\_Promise\Promise_Impl_;
use \tink\core\MPair;
use \tink\core\FutureObject;

class RealSourceTools {
	/**
	 * @param StreamObject $s
	 * 
	 * @return FutureObject
	 */
	public static function all ($s) {
		return Source_Impl_::concatAll($s)->map(function ($o) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 1) {
				return Outcome::Failure($o->params[0]);
			} else if ($__hx__switch === 2) {
				return Outcome::Success($o->params[0]);
			}
		})->gather();
	}

	/**
	 * @param StreamObject $s
	 * @param \Closure $rescue
	 * 
	 * @return StreamObject
	 */
	public static function idealize ($s, $rescue) {
		return Source_Impl_::chunked($s)->idealize($rescue);
	}

	/**
	 * @param StreamObject $s
	 * @param StreamParserObject $p
	 * 
	 * @return FutureObject
	 */
	public static function parse ($s, $p) {
		return StreamParser_Impl_::parse($s, $p)->map(function ($r) {
			$__hx__switch = ($r->index);
			if ($__hx__switch === 0) {
				return Outcome::Success(new MPair($r->params[0], $r->params[1]));
			} else if ($__hx__switch === 1) {
				return Outcome::Failure($r->params[0]);
			} else if ($__hx__switch === 2) {
				return Outcome::Failure($r->params[0]);
			}
		})->gather();
	}

	/**
	 * @param StreamObject $s
	 * @param StreamParserObject $p
	 * 
	 * @return StreamObject
	 */
	public static function parseStream ($s, $p) {
		return StreamParser_Impl_::parseStream($s, $p);
	}

	/**
	 * @param StreamObject $src
	 * @param ChunkObject $delim
	 * 
	 * @return object
	 */
	public static function split ($src, $delim) {
		$s = RealSourceTools::parse($src, new Splitter($delim));
		$tmp = Stream_Impl_::promise(Promise_Impl_::ofSpecific(Promise_Impl_::next($s, Next_Impl_::ofSafeSync(function ($p) use (&$src) {
			$_g = $p->a;
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				return new Single(new LazyConst($_g->params[0]));
			} else if ($__hx__switch === 1) {
				return $src;
			}
		}))));
		$tmp1 = Promise_Impl_::next($s, function ($p) use (&$delim) {
			$__hx__switch = ($p->a->index);
			if ($__hx__switch === 0) {
				return new SyncFuture(new LazyConst(Outcome::Success($delim)));
			} else if ($__hx__switch === 1) {
				return new SyncFuture(new LazyConst(Outcome::Failure(new TypedError(404, "Delimiter not found", new HxAnon([
					"fileName" => "tink/io/Source.hx",
					"lineNumber" => 195,
					"className" => "tink.io.RealSourceTools",
					"methodName" => "split",
				])))));
			}
		});
		return new HxAnon([
			"before" => $tmp,
			"delimiter" => $tmp1,
			"after" => Stream_Impl_::promise(Promise_Impl_::ofSpecific(Promise_Impl_::next($s, Next_Impl_::ofSafeSync(function ($p) {
				return $p->b;
			})))),
		]);
	}
}

Boot::registerClass(RealSourceTools::class, 'tink.io.RealSourceTools');
