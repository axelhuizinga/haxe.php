<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace tink\io;

use \tink\chunk\ChunkObject;
use \haxe\ds\Option;
use \php\Boot;
use \tink\streams\Single;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\streams\Conclusion;

class PipeResultTools {
	/**
	 * Transform PipeResult to an Outcome of the sink result
	 * 
	 * @param PipeResult $result
	 * 
	 * @return Outcome
	 */
	public static function toOutcome ($result) {
		$__hx__switch = ($result->index);
		if ($__hx__switch === 0) {
			return Outcome::Success(Option::None());
		} else if ($__hx__switch === 1) {
			return Outcome::Success(Option::Some($result->params[0]));
		} else if ($__hx__switch === 2) {
			return Outcome::Failure($result->params[0]);
		} else if ($__hx__switch === 3) {
			return Outcome::Failure($result->params[0]);
		}
	}

	/**
	 * @param Conclusion $c
	 * @param mixed $result
	 * @param ChunkObject $buffered
	 * 
	 * @return PipeResult
	 */
	public static function toResult ($c, $result, $buffered = null) {
		$mk = function ($s) use (&$buffered) {
			if ($buffered === null) {
				return $s;
			} else {
				return $s->prepend(new Single(new LazyConst($buffered)));
			}
		};
		$__hx__switch = ($c->index);
		if ($__hx__switch === 0) {
			return PipeResult::SinkEnded($result, $mk($c->params[0]));
		} else if ($__hx__switch === 1) {
			return PipeResult::SinkFailed($c->params[0], $mk($c->params[1]));
		} else if ($__hx__switch === 2) {
			return PipeResult::SourceFailed($c->params[0]);
		} else if ($__hx__switch === 3) {
			return PipeResult::AllWritten();
		}
	}
}

Boot::registerClass(PipeResultTools::class, 'tink.io.PipeResultTools');
