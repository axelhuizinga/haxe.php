<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace tink\io\_Sink;

use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \haxe\Exception;
use \tink\streams\StreamObject;
use \tink\streams\Handled;
use \tink\core\_Lazy\LazyConst;
use \tink\streams\_Stream\Handler_Impl_;
use \tink\io\PipeResult;
use \tink\core\FutureObject;
use \tink\io\SinkBase;

class Blackhole extends SinkBase {
	/**
	 * @var Blackhole
	 */
	static public $inst;

	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param StreamObject $source
	 * @param object $options
	 * 
	 * @return FutureObject
	 */
	public function consume ($source, $options) {
		return $source->forEach(Handler_Impl_::ofSafe(function ($_) {
			return new SyncFuture(new LazyConst(Handled::Resume()));
		}))->map(function ($o) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				throw Exception::thrown("unreachable");
			} else if ($__hx__switch === 2) {
				return PipeResult::SourceFailed($o->params[0]);
			} else if ($__hx__switch === 3) {
				return PipeResult::AllWritten();
			}
		})->gather();
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$inst = new Blackhole();
	}
}

Boot::registerClass(Blackhole::class, 'tink.io._Sink.Blackhole');
Blackhole::__hx__init();
