<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace tink\url\_Query;

use \tink\core\NamedWith;
use \php\Boot;
use \php\_Boot\HxString;
use \tink\url\_Portion\Portion_Impl_;

class QueryStringParser {
	/**
	 * @var int
	 */
	public $pos;
	/**
	 * @var string
	 */
	public $s;
	/**
	 * @var string
	 */
	public $sep;
	/**
	 * @var string
	 */
	public $set;

	/**
	 * @param string $s
	 * @param int $start
	 * @param int $end
	 * 
	 * @return string
	 */
	public static function trimmedSub ($s, $start, $end) {
		if ($start >= mb_strlen($s)) {
			return "";
		}
		while (\StringTools::fastCodeAt($s, $start) < 33) {
			++$start;
		}
		if ($end < (mb_strlen($s) - 1)) {
			while (\StringTools::fastCodeAt($s, $end - 1) < 33) {
				--$end;
			}
		}
		return HxString::substring($s, $start, $end);
	}

	/**
	 * @param string $s
	 * @param string $sep
	 * @param string $set
	 * @param int $pos
	 * 
	 * @return void
	 */
	public function __construct ($s, $sep, $set, $pos) {
		$this->s = ($s === null ? "" : $s);
		$this->sep = $sep;
		$this->set = $set;
		$this->pos = $pos;
	}

	/**
	 * @return bool
	 */
	public function hasNext () {
		return $this->pos < mb_strlen($this->s);
	}

	/**
	 * @return NamedWith
	 */
	public function next () {
		$next = HxString::indexOf($this->s, $this->sep, $this->pos);
		if ($next === -1) {
			$next = mb_strlen($this->s);
		}
		$split = HxString::indexOf($this->s, $this->set, $this->pos);
		$start = $this->pos;
		$this->pos = $next + mb_strlen($this->sep);
		if (($split === -1) || ($split > $next)) {
			$tmp = Portion_Impl_::stringly(QueryStringParser::trimmedSub($this->s, $start, $next));
			return new NamedWith($tmp, Portion_Impl_::ofString(""));
		} else {
			$tmp = Portion_Impl_::stringly(QueryStringParser::trimmedSub($this->s, $start, $split));
			return new NamedWith($tmp, QueryStringParser::trimmedSub($this->s, $split + mb_strlen($this->set), $next));
		}
	}
}

Boot::registerClass(QueryStringParser::class, 'tink.url._Query.QueryStringParser');
