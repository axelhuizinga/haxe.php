<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace tink\core\_Signal;

use \tink\core\_Callback\LinkPair;
use \php\Boot;
use \tink\core\LinkObject;
use \tink\core\_Callback\ListCell;
use \tink\core\SimpleLink;
use \tink\core\SignalTrigger;
use \tink\core\SignalObject;

class Suspendable implements SignalObject {
	/**
	 * @var \Closure
	 */
	public $activate;
	/**
	 * @var LinkObject
	 */
	public $check;
	/**
	 * @var bool
	 */
	public $killed;
	/**
	 * @var \Closure
	 */
	public $suspend;
	/**
	 * @var SignalTrigger
	 */
	public $trigger;

	/**
	 * @param \Closure $activate
	 * 
	 * @return void
	 */
	public function __construct ($activate) {
		$this->killed = false;
		$this->trigger = new SignalTrigger();
		$this->activate = $activate;
	}

	/**
	 * @return void
	 */
	public function kill () {
		if (!$this->killed) {
			$this->killed = true;
			$this->trigger = null;
		}
	}

	/**
	 * @param \Closure $cb
	 * 
	 * @return LinkObject
	 */
	public function listen ($cb) {
		$_gthis = $this;
		if ($this->killed) {
			return null;
		}
		if ($this->trigger->handlers->used === 0) {
			$this->suspend = ($this->activate)(Boot::getInstanceClosure($this->trigger, 'trigger'));
		}
		$_this = $this->trigger->handlers;
		$node = new ListCell($cb, $_this);
		$_this1 = $_this->cells;
		$_this1->arr[$_this1->length++] = $node;
		if ($_this->used++ === 0) {
			$_this->onfill();
		}
		return new LinkPair($node, new SimpleLink(function () use (&$_gthis) {
			if ($_gthis->trigger->handlers->used === 0) {
				($_gthis->suspend)();
				$_gthis->suspend = null;
			}
		}));
	}
}

Boot::registerClass(Suspendable::class, 'tink.core._Signal.Suspendable');
