<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace tink\core\_Progress;

use \tink\core\ProgressObject;
use \tink\core\_Signal\Signal_Impl_;
use \haxe\ds\Option;
use \tink\core\PromiseProgress;
use \php\Boot;
use \tink\core\TotalTools;
use \tink\core\_Future\Future_Impl_;
use \tink\core\ProgressTrigger;
use \tink\core\ProgressType;
use \tink\core\MPair;
use \tink\core\FutureObject;
use \tink\core\FutureProgress;
use \tink\core\CompositeProgress;

final class Progress_Impl_ {
	/**
	 * @var MPair
	 */
	static public $INIT;

	/**
	 * @param ProgressObject $this
	 * 
	 * @return FutureObject
	 */
	public static function asFuture ($this1) {
		return $this1;
	}

	/**
	 * @param ProgressObject $p
	 * 
	 * @return FutureObject
	 */
	public static function asPromise ($p) {
		return $p;
	}

	/**
	 * @param FutureObject $v
	 * 
	 * @return ProgressObject
	 */
	public static function future ($v) {
		return new FutureProgress($v);
	}

	/**
	 * @param \Closure $f
	 * 
	 * @return CompositeProgress
	 */
	public static function make ($f) {
		$value = ProgressType::InProgress(Progress_Impl_::$INIT);
		$signal = Signal_Impl_::trigger();
		$future = Future_Impl_::async(function ($cb) use (&$f, &$signal, &$value) {
			$progress = function ($v, $total) use (&$signal, &$value) {
				$__hx__switch = ($value->index);
				if ($__hx__switch === 0) {
					$_g = $value->params[0];
					if (!Boot::equal($_g->a, $v) || !TotalTools::eq($_g->b, $total)) {
						$pv = new MPair($v, $total);
						$value = ProgressType::InProgress($pv);
						$signal->handlers->invoke($pv);
					}
				} else if ($__hx__switch === 1) {
				}
			};
			$finish = function ($v) use (&$cb, &$value) {
				if ($value->index !== 1) {
					$value = ProgressType::Finished($v);
					$cb($v);
				}
			};
			$f($progress, $finish);
		});
		return new CompositeProgress($future, $signal);
	}

	/**
	 * @param ProgressObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	public static function next ($this1, $f) {
		return Future_Impl_::next($this1, $f);
	}

	/**
	 * @param FutureObject $v
	 * 
	 * @return ProgressObject
	 */
	public static function promise ($v) {
		return new PromiseProgress($v);
	}

	/**
	 * @return ProgressTrigger
	 */
	public static function trigger () {
		return new ProgressTrigger();
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$INIT = new MPair(0.0, Option::None());
	}
}

Boot::registerClass(Progress_Impl_::class, 'tink.core._Progress.Progress_Impl_');
Progress_Impl_::__hx__init();
