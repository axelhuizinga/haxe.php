<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace tink\core\_Outcome;

use \php\_Boot\HxAnon;
use \php\Boot;
use \haxe\ds\Either;
use \tink\core\Outcome;

final class OutcomeMapper_Impl_ {
	/**
	 * @param \Closure $f
	 * 
	 * @return object
	 */
	public static function _new ($f) {
		return new HxAnon(["f" => $f]);
	}

	/**
	 * @param object $this
	 * @param Outcome $o
	 * 
	 * @return Outcome
	 */
	public static function apply ($this1, $o) {
		return $this1->f($o);
	}

	/**
	 * @param \Closure $f
	 * 
	 * @return object
	 */
	public static function withEitherError ($f) {
		return OutcomeMapper_Impl_::_new(function ($o) use (&$f) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				$_g = $f($o->params[0]);
				$__hx__switch = ($_g->index);
				if ($__hx__switch === 0) {
					return Outcome::Success($_g->params[0]);
				} else if ($__hx__switch === 1) {
					return Outcome::Failure(Either::Right($_g->params[0]));
				}
			} else if ($__hx__switch === 1) {
				return Outcome::Failure(Either::Left($o->params[0]));
			}
		});
	}

	/**
	 * @param \Closure $f
	 * 
	 * @return object
	 */
	public static function withSameError ($f) {
		return OutcomeMapper_Impl_::_new(function ($o) use (&$f) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				return $f($o->params[0]);
			} else if ($__hx__switch === 1) {
				return Outcome::Failure($o->params[0]);
			}
		});
	}
}

Boot::registerClass(OutcomeMapper_Impl_::class, 'tink.core._Outcome.OutcomeMapper_Impl_');
