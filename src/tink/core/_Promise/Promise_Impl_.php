<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace tink\core\_Promise;

use \php\_Boot\HxAnon;
use \tink\core\_Lazy\LazyObject;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\core\Noise;
use \tink\core\LinkObject;
use \tink\core\TypedError;
use \tink\core\Outcome;
use \tink\core\FutureTrigger;
use \tink\core\_Lazy\LazyConst;
use \tink\core\OutcomeTools;
use \tink\core\_Future\Future_Impl_;
use \tink\core\MPair;
use \tink\core\_Callback\CallbackLink_Impl_;
use \tink\core\FutureObject;

final class Promise_Impl_ {
	/**
	 * @var FutureObject
	 */
	static public $NEVER;
	/**
	 * @var FutureObject
	 */
	static public $NOISE;
	/**
	 * @var FutureObject
	 */
	static public $NULL;

	/**
	 * @param \Closure $f
	 * @param bool $lazy
	 * 
	 * @return FutureObject
	 */
	public static function _new ($f, $lazy = false) {
		if ($lazy === null) {
			$lazy = false;
		}
		return Future_Impl_::async(function ($cb) use (&$f) {
			$f(function ($v) use (&$cb) {
				$cb(Outcome::Success($v));
			}, function ($e) use (&$cb) {
				$cb(Outcome::Failure($e));
			});
		}, $lazy);
	}

	/**
	 * @param FutureObject $a
	 * @param FutureObject $b
	 * 
	 * @return FutureObject
	 */
	public static function and ($a, $b) {
		return Promise_Impl_::merge($a, $b, function ($a, $b) {
			return new SyncFuture(new LazyConst(Outcome::Success(new MPair($a, $b))));
		});
	}

	/**
	 * @param \Closure $gen
	 * 
	 * @return \Closure
	 */
	public static function cache ($gen) {
		$p = null;
		return function () use (&$gen, &$p) {
			$ret = $p;
			if ($ret === null) {
				$sync = false;
				$ret = Promise_Impl_::next($gen(), function ($o) use (&$sync, &$p) {
					$o->b->handle(function ($_) use (&$sync, &$p) {
						$sync = true;
						$p = null;
					});
					return new SyncFuture(new LazyConst(Outcome::Success($o->a)));
				});
				if (!$sync) {
					$p = $ret;
				}
			}
			return $ret->map(function ($o) use (&$p) {
				if (!OutcomeTools::isSuccess($o)) {
					$p = null;
				}
				return $o;
			})->gather();
		};
	}

	/**
	 * @param FutureObject $this
	 * 
	 * @return FutureObject
	 */
	public static function eager ($this1) {
		return $this1->eager();
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	public static function flatMap ($this1, $f) {
		return $this1->flatMap($f)->gather();
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $cb
	 * 
	 * @return LinkObject
	 */
	public static function handle ($this1, $cb) {
		return $this1->handle($cb);
	}

	/**
	 * @param \Array_hx $a
	 * @param int $concurrency
	 * @param bool $lazy
	 * 
	 * @return FutureObject
	 */
	public static function inParallel ($a, $concurrency = null, $lazy = null) {
		if ($a->length === 0) {
			return new SyncFuture(new LazyConst(Outcome::Success(new \Array_hx())));
		} else {
			return Future_Impl_::async(function ($cb) use (&$concurrency, &$a) {
				$result = new \Array_hx();
				$pending = $a->length;
				$links = null;
				$linkArray = new \Array_hx();
				$sync = false;
				$i = 0;
				$iter_current = null;
				$iter_array = null;
				$iter_current = 0;
				$iter_array = $a;
				$next = null;
				$done = function ($o) use (&$sync, &$links, &$cb) {
					if ($links === null) {
						$sync = true;
					} else if ($links !== null) {
						$links->cancel();
					}
					$cb($o);
				};
				$fail = function ($e) use (&$pending, &$done) {
					$pending = 0;
					$done(Outcome::Failure($e));
				};
				$set = function ($index, $value) use (&$next, &$iter_current, &$pending, &$iter_array, &$result, &$done) {
					$result->offsetSet($index, $value);
					if (($pending -= 1) === 0) {
						$done(Outcome::Success($result));
					} else if (($iter_current < $iter_array->length) && ($pending > 0)) {
						$next();
					}
				};
				$next = function () use (&$iter_current, &$set, &$fail, &$i, &$iter_array, &$linkArray) {
					$i += 1;
					$index = $i - 1;
					$iter_current += 1;
					$x = ($iter_array->arr[$iter_current - 1] ?? null)->handle(function ($o) use (&$index, &$set, &$fail) {
						$__hx__switch = ($o->index);
						if ($__hx__switch === 0) {
							$set($index, $o->params[0]);
						} else if ($__hx__switch === 1) {
							$fail($o->params[0]);
						}
					});
					$linkArray->arr[$linkArray->length++] = $x;
				};
				while (true) {
					$tmp = null;
					if (($iter_current < $iter_array->length) && ($pending > 0)) {
						if ($concurrency !== null) {
							$concurrency -= 1;
							$tmp = ($concurrency + 1) > 0;
						} else {
							$tmp = true;
						}
					} else {
						$tmp = false;
					}
					if (!$tmp) {
						break;
					}
					$next();
				}
				$links = CallbackLink_Impl_::fromMany($linkArray);
				if ($sync) {
					if ($links !== null) {
						$links->cancel();
					}
				}
			}, $lazy);
		}
	}

	/**
	 * @param \Array_hx $a
	 * 
	 * @return FutureObject
	 */
	public static function inSequence ($a) {
		$loop = null;
		$loop = function ($index) use (&$loop, &$a) {
			if ($index === $a->length) {
				return new SyncFuture(new LazyConst(Outcome::Success(new \Array_hx())));
			} else {
				return Promise_Impl_::next(($a->arr[$index] ?? null), function ($head) use (&$index, &$loop) {
					return Promise_Impl_::next($loop($index + 1), function ($tail) use (&$head) {
						return new SyncFuture(new LazyConst(Outcome::Success((\Array_hx::wrap([$head]))->concat($tail))));
					});
				});
			}
		};
		return $loop(0);
	}

	/**
	 * @param FutureObject $this
	 * 
	 * @return FutureObject
	 */
	public static function isSuccess ($this1) {
		return $this1->map(function ($o) {
			return OutcomeTools::isSuccess($o);
		})->gather();
	}

	/**
	 * Given an Iterable (e.g. Array) of Promises, handle them one by one with the `yield` function until one of them yields `Some` value
	 * and the returned promise will resolve that value. If all of them yields `None`, the returned promise will resolve to the `fallback` promise.
	 * In a nutshell, it is the async version of the following code:
	 * ```haxe
	 * for(promise in promises) {
	 *   switch yield(promise) {
	 *     case Some(v): return v;
	 *     case None:
	 *   }
	 * }
	 * return fallback;
	 * ```
	 * @param promises An Iterable (e.g. Array) of Promises
	 * @param yield A function used to handle the promises and should return an Option
	 * @param fallback A value to be used when all yields `None`
	 * @return Promise<T>
	 * 
	 * @param object $promises
	 * @param \Closure $yield
	 * @param FutureObject $fallback
	 * @param bool $lazy
	 * 
	 * @return FutureObject
	 */
	public static function iterate ($promises, $yield, $fallback, $lazy = null) {
		return Future_Impl_::async(function ($cb) use (&$yield, &$fallback, &$promises) {
			$iter = $promises->iterator();
			$next = null;
			$next = function () use (&$yield, &$next, &$iter, &$fallback, &$cb) {
				if ($iter->hasNext()) {
					$iter->next()->handle(function ($o) use (&$yield, &$next, &$cb) {
						$__hx__switch = ($o->index);
						if ($__hx__switch === 0) {
							$yield($o->params[0])->handle(function ($o) use (&$next, &$cb) {
								$__hx__switch = ($o->index);
								if ($__hx__switch === 0) {
									$_g = $o->params[0];
									$__hx__switch = ($_g->index);
									if ($__hx__switch === 0) {
										$cb(Outcome::Success($_g->params[0]));
									} else if ($__hx__switch === 1) {
										$next();
									}
								} else if ($__hx__switch === 1) {
									$cb(Outcome::Failure($o->params[0]));
								}
							});
						} else if ($__hx__switch === 1) {
							$cb(Outcome::Failure($o->params[0]));
						}
					});
				} else {
					$fallback->handle($cb);
				}
			};
			$next();
		}, $lazy);
	}

	/**
	 * @param LazyObject $p
	 * 
	 * @return FutureObject
	 */
	public static function lazy ($p) {
		return Future_Impl_::async(function ($cb) use (&$p) {
			$p->get()->handle($cb);
		}, true);
	}

	/**
	 * @param FutureObject $p
	 * 
	 * @return FutureObject
	 */
	public static function lift ($p) {
		return $p;
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	public static function map ($this1, $f) {
		return $this1->map($f)->gather();
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	public static function mapError ($this1, $f) {
		return $this1->map(function ($o) use (&$f) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				return $o;
			} else if ($__hx__switch === 1) {
				return Outcome::Failure($f($o->params[0]));
			}
		})->gather();
	}

	/**
	 * @param FutureObject $this
	 * @param FutureObject $other
	 * @param \Closure $merger
	 * @param bool $gather
	 * 
	 * @return FutureObject
	 */
	public static function merge ($this1, $other, $merger, $gather = true) {
		if ($gather === null) {
			$gather = true;
		}
		return Promise_Impl_::next($this1, function ($t) use (&$other, &$merger) {
			return Promise_Impl_::next($other, function ($a) use (&$t, &$merger) {
				return $merger($t, $a);
			}, false);
		}, $gather);
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * @param bool $gather
	 * 
	 * @return FutureObject
	 */
	public static function next ($this1, $f, $gather = true) {
		if ($gather === null) {
			$gather = true;
		}
		$gather1 = $gather;
		if ($gather === null) {
			$gather1 = true;
		}
		$ret = $this1->flatMap(function ($o) use (&$f) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				return $f($o->params[0]);
			} else if ($__hx__switch === 1) {
				return new SyncFuture(new LazyConst(Outcome::Failure($o->params[0])));
			}
		});
		if ($gather1) {
			return $ret->gather();
		} else {
			return $ret;
		}
	}

	/**
	 * @param FutureObject $this
	 * 
	 * @return FutureObject
	 */
	public static function noise ($this1) {
		return Promise_Impl_::next($this1, function ($v) {
			return new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
		});
	}

	/**
	 * @param mixed $d
	 * 
	 * @return FutureObject
	 */
	public static function ofData ($d) {
		return new SyncFuture(new LazyConst(Outcome::Success($d)));
	}

	/**
	 * @param TypedError $e
	 * 
	 * @return FutureObject
	 */
	public static function ofError ($e) {
		return new SyncFuture(new LazyConst(Outcome::Failure($e)));
	}

	/**
	 * @param FutureObject $f
	 * 
	 * @return FutureObject
	 */
	public static function ofFuture ($f) {
		return $f->map(Boot::getStaticClosure(Outcome::class, 'Success'))->gather();
	}

	/**
	 * @param Outcome $o
	 * 
	 * @return FutureObject
	 */
	public static function ofOutcome ($o) {
		return new SyncFuture(new LazyConst($o));
	}

	/**
	 * @param FutureObject $s
	 * 
	 * @return FutureObject
	 */
	public static function ofSpecific ($s) {
		return $s;
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	public static function recover ($this1, $f) {
		return $this1->flatMap(function ($o) use (&$f) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				return new SyncFuture(new LazyConst($o->params[0]));
			} else if ($__hx__switch === 1) {
				return $f($o->params[0]);
			}
		})->gather();
	}

	/**
	 * @param TypedError $e
	 * 
	 * @return FutureObject
	 */
	public static function reject ($e) {
		return new SyncFuture(new LazyConst(Outcome::Failure($e)));
	}

	/**
	 * @param mixed $v
	 * 
	 * @return FutureObject
	 */
	public static function resolve ($v) {
		return new SyncFuture(new LazyConst(Outcome::Success($v)));
	}

	/**
	 * Retry a promise generator repeatedly
	 *
	 * @param gen A function that returns a `Promise`, this function will be called multiple times during the retry process
	 * @param next A callback to be called when an attempt failed. An object will be received containing the info of the last attempt:
	 *   `attempt` is the number of attempts tried, starting from `1`
	 *   `error` is the error produced from the last attempt
	 *   `elasped` is the amount of time (in ms) elapsed since the beginning of the `retry` call
	 *
	 *   If this function's returned promised resolves to an `Error`, this retry will abort with such error. Otherwise if it resolves to a `Success(Noise)`, the retry will continue.
	 *
	 *   Some usage examples:
	 *     - wait longer for later attempts and stop after a limit:
	 *     ```haxe
	 *     function (info) return switch info.attempt {
	 *         case 10: info.error;
	 *         case v: Future.delay(v * 1000, Noise);
	 *     }
	 *     ```
	 *
	 *     - bail out on error codes that are fatal:
	 *     ```haxe
	 *     function (info) return switch info.error.code {
	 *       case Forbidden : info.error; // in this case new attempts probably make no sense
	 *       default: Future.delay(1000, Noise);
	 *     }
	 *     ```
	 *
	 *     - and also actually timeout:
	 *     ```haxe
	 *     // with using DateTools
	 *     function (info) return
	 *       if (info.elapsed > 2.minutes()) info.error
	 *       else Future.delay(1000, Noise);
	 *     ```
	 *
	 * @return Promise<T>
	 * 
	 * @param \Closure $gen
	 * @param \Closure $next
	 * 
	 * @return FutureObject
	 */
	public static function retry ($gen, $next) {
		$stamp = function () {
			return \microtime(true) * 1000;
		};
		$start = $stamp();
		$attempt = null;
		$attempt = function ($count) use (&$next, &$stamp, &$start, &$gen, &$attempt) {
			$f = function ($error) use (&$count, &$next, &$stamp, &$start, &$attempt) {
				$count1 = $count;
				return Promise_Impl_::next($next(new HxAnon([
					"attempt" => $count1,
					"error" => $error,
					"elapsed" => $stamp() - $start,
				])), function ($_) use (&$count, &$attempt) {
					return $attempt($count + 1);
				});
			};
			return $gen()->flatMap(function ($o) use (&$f) {
				$__hx__switch = ($o->index);
				if ($__hx__switch === 0) {
					return new SyncFuture(new LazyConst($o));
				} else if ($__hx__switch === 1) {
					return $f($o->params[0]);
				}
			})->gather();
		};
		return $attempt(1);
	}

	/**
	 * @param FutureObject $this
	 * @param mixed $v
	 * 
	 * @return FutureObject
	 */
	public static function swap ($this1, $v) {
		return Future_Impl_::_tryMap($this1, function ($_) use (&$v) {
			return $v;
		});
	}

	/**
	 * @param FutureObject $this
	 * @param TypedError $e
	 * 
	 * @return FutureObject
	 */
	public static function swapError ($this1, $e) {
		return Promise_Impl_::mapError($this1, function ($_) use (&$e) {
			return $e;
		});
	}

	/**
	 *  Creates a new `PromiseTrigger`
	 * 
	 * @return FutureTrigger
	 */
	public static function trigger () {
		return new FutureTrigger();
	}

	/**
	 * @param FutureObject $this
	 * @param \Closure $f
	 * 
	 * @return FutureObject
	 */
	public static function tryRecover ($this1, $f) {
		return $this1->flatMap(function ($o) use (&$f) {
			$__hx__switch = ($o->index);
			if ($__hx__switch === 0) {
				return new SyncFuture(new LazyConst($o));
			} else if ($__hx__switch === 1) {
				return $f($o->params[0]);
			}
		})->gather();
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$NULL = new SyncFuture(new LazyConst(Outcome::Success(null)));
		self::$NOISE = new SyncFuture(new LazyConst(Outcome::Success(Noise::Noise())));
		self::$NEVER = Future_Impl_::$NEVER->map(Boot::getStaticClosure(Outcome::class, 'Success'))->gather();
	}
}

Boot::registerClass(Promise_Impl_::class, 'tink.core._Promise.Promise_Impl_');
Promise_Impl_::__hx__init();
