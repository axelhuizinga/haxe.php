<?php
/**
 * Generated by Haxe 4.1.1
 */

namespace tink\core\_Lazy;

use \php\Boot;

class LazyFunc implements LazyObject {
	/**
	 * @var \Closure
	 */
	public $f;
	/**
	 * @var mixed
	 */
	public $result;

	/**
	 * @param \Closure $f
	 * 
	 * @return void
	 */
	public function __construct ($f) {
		$this->f = $f;
	}

	/**
	 * @param \Closure $f
	 * 
	 * @return LazyObject
	 */
	public function flatMap ($f) {
		$_gthis = $this;
		return new LazyFunc(function () use (&$f, &$_gthis) {
			return $f($_gthis->get())->get();
		});
	}

	/**
	 * @return mixed
	 */
	public function get () {
		if ($this->f !== null) {
			$this->result = ($this->f)();
			$this->f = null;
		}
		return $this->result;
	}

	/**
	 * @param \Closure $f
	 * 
	 * @return LazyObject
	 */
	public function map ($f) {
		$_gthis = $this;
		return new LazyFunc(function () use (&$f, &$_gthis) {
			return $f($_gthis->get());
		});
	}
}

Boot::registerClass(LazyFunc::class, 'tink.core._Lazy.LazyFunc');
