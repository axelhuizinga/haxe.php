<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace tink\core\_Ref;

use \php\Boot;
use \haxe\ds\_Vector\PhpVectorData;

final class Ref_Impl_ {

	/**
	 * @return PhpVectorData
	 */
	public static function _new () {
		return new PhpVectorData(1);
	}

	/**
	 * @param PhpVectorData $this
	 * 
	 * @return mixed
	 */
	public static function get_value ($this1) {
		return ($this1->data[0] ?? null);
	}

	/**
	 * @param PhpVectorData $this
	 * @param mixed $param
	 * 
	 * @return mixed
	 */
	public static function set_value ($this1, $param) {
		return $this1->data[0] = $param;
	}

	/**
	 * @param mixed $v
	 * 
	 * @return PhpVectorData
	 */
	public static function to ($v) {
		$ret = new PhpVectorData(1);
		$ret->data[0] = $v;
		return $ret;
	}

	/**
	 * @param PhpVectorData $this
	 * 
	 * @return string
	 */
	public static function toString ($this1) {
		return "@[" . (\Std::string(($this1->data[0] ?? null))??'null') . "]";
	}
}

Boot::registerClass(Ref_Impl_::class, 'tink.core._Ref.Ref_Impl_');
Boot::registerGetters('tink\\core\\_Ref\\Ref_Impl_', [
	'value' => true
]);
Boot::registerSetters('tink\\core\\_Ref\\Ref_Impl_', [
	'value' => true
]);
