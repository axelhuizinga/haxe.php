<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace tink\streams\_Stream;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\streams\RegroupResult;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\core\_Promise\Recover_Impl_;
use \tink\streams\Empty_hx;
use \tink\core\_Promise\Promise_Impl_;

final class Filter_Impl_ {
	/**
	 * @param object $o
	 * 
	 * @return object
	 */
	public static function _new ($o) {
		return $o;
	}

	/**
	 * @param \Closure $f
	 * 
	 * @return object
	 */
	public static function ofAsync ($f) {
		return new HxAnon(["apply" => function ($i, $_) use (&$f) {
			return $f(($i->arr[0] ?? null))->map(function ($matched) use (&$i) {
				return RegroupResult::Converted(($matched ? Stream_Impl_::single(($i->arr[0] ?? null)) : Empty_hx::$inst));
			})->gather();
		}]);
	}

	/**
	 * @param \Closure $n
	 * 
	 * @return object
	 */
	public static function ofNext ($n) {
		return new HxAnon(["apply" => function ($i, $_) use (&$n) {
			$this1 = Promise_Impl_::next($n(($i->arr[0] ?? null)), function ($matched) use (&$i) {
				return new SyncFuture(new LazyConst(Outcome::Success(RegroupResult::Converted(($matched ? Stream_Impl_::single(($i->arr[0] ?? null)) : Empty_hx::$inst)))));
			});
			$f = Recover_Impl_::ofSync(Boot::getStaticClosure(RegroupResult::class, 'Errored'));
			return $this1->flatMap(function ($o) use (&$f) {
				$__hx__switch = ($o->index);
				if ($__hx__switch === 0) {
					return new SyncFuture(new LazyConst($o->params[0]));
				} else if ($__hx__switch === 1) {
					return $f($o->params[0]);
				}
			})->gather();
		}]);
	}

	/**
	 * @param \Closure $f
	 * 
	 * @return object
	 */
	public static function ofPlain ($f) {
		return new HxAnon(["apply" => function ($i, $_) use (&$f) {
			return new SyncFuture(new LazyConst(RegroupResult::Converted(($f(($i->arr[0] ?? null)) ? Stream_Impl_::single(($i->arr[0] ?? null)) : Empty_hx::$inst))));
		}]);
	}

	/**
	 * @param \Closure $f
	 * 
	 * @return object
	 */
	public static function ofSync ($f) {
		return new HxAnon(["apply" => function ($i, $_) use (&$f) {
			$v = null;
			$_g = $f(($i->arr[0] ?? null));
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				$v = RegroupResult::Converted(($_g->params[0] ? Stream_Impl_::single(($i->arr[0] ?? null)) : Empty_hx::$inst));
			} else if ($__hx__switch === 1) {
				$v = RegroupResult::Errored($_g->params[0]);
			}
			return new SyncFuture(new LazyConst($v));
		}]);
	}
}

Boot::registerClass(Filter_Impl_::class, 'tink.streams._Stream.Filter_Impl_');
