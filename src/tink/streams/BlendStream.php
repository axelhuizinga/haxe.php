<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace tink\streams;

use \php\Boot;
use \tink\core\_Future\Future_Impl_;

class BlendStream extends Generator {
	/**
	 * @param StreamObject $a
	 * @param StreamObject $b
	 * 
	 * @return void
	 */
	public function __construct ($a, $b) {
		$first = null;
		$wait = function ($s) use (&$first) {
			return $s->next()->map(function ($o) use (&$first, &$s) {
				if ($first === null) {
					$first = $s;
				}
				return $o;
			})->gather();
		};
		$n1 = $wait($a);
		$n2 = $wait($b);
		parent::__construct(Future_Impl_::async(function ($cb) use (&$n2, &$n1, &$first, &$b, &$a) {
			Future_Impl_::first($n1, $n2)->handle(function ($o) use (&$n2, &$n1, &$first, &$b, &$cb, &$a) {
				$__hx__switch = ($o->index);
				if ($__hx__switch === 0) {
					$cb(Step::Link($o->params[0], new BlendStream($o->params[1], ($first === $a ? $b : $a))));
				} else if ($__hx__switch === 1) {
					$cb(Step::Fail($o->params[0]));
				} else if ($__hx__switch === 2) {
					Boot::deref((($first === $a ? $n2 : $n1)))->handle($cb);
				}
			});
		}));
	}
}

Boot::registerClass(BlendStream::class, 'tink.streams.BlendStream');
