<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace tink\streams;

use \tink\core\_Future\SyncFuture;
use \tink\core\_Lazy\LazyObject;
use \php\Boot;
use \tink\core\_Lazy\LazyConst;
use \tink\core\FutureObject;

class Single extends StreamBase {
	/**
	 * @var LazyObject
	 */
	public $value;

	/**
	 * @param LazyObject $value
	 * 
	 * @return void
	 */
	public function __construct ($value) {
		parent::__construct();
		$this->value = $value;
	}

	/**
	 * @param \Closure $handle
	 * 
	 * @return FutureObject
	 */
	public function forEach ($handle) {
		$_gthis = $this;
		return $handle($this->value->get())->map(function ($step) use (&$_gthis) {
			$__hx__switch = ($step->index);
			if ($__hx__switch === 0) {
				return Conclusion::Halted($_gthis);
			} else if ($__hx__switch === 1) {
				return Conclusion::Halted(Empty_hx::$inst);
			} else if ($__hx__switch === 2) {
				return Conclusion::Depleted();
			} else if ($__hx__switch === 3) {
				return Conclusion::Clogged($step->params[0], $_gthis);
			}
		})->gather();
	}

	/**
	 * @return FutureObject
	 */
	public function next () {
		$v = $this->value->get();
		return new SyncFuture(new LazyConst(Step::Link($v, Empty_hx::$inst)));
	}
}

Boot::registerClass(Single::class, 'tink.streams.Single');
