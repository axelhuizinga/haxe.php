<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace tink\streams;

use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\core\_Lazy\LazyConst;
use \tink\core\_Future\Future_Impl_;
use \tink\core\FutureObject;

class IdealizeStream extends IdealStreamBase {
	/**
	 * @var \Closure
	 */
	public $rescue;
	/**
	 * @var StreamObject
	 */
	public $target;

	/**
	 * @param StreamObject $target
	 * @param \Closure $rescue
	 * 
	 * @return void
	 */
	public function __construct ($target, $rescue) {
		parent::__construct();
		$this->target = $target;
		$this->rescue = $rescue;
	}

	/**
	 * @param \Closure $handler
	 * 
	 * @return FutureObject
	 */
	public function forEach ($handler) {
		$_gthis = $this;
		return Future_Impl_::async(function ($cb) use (&$_gthis, &$handler) {
			$_gthis->target->forEach($handler)->handle(function ($end) use (&$_gthis, &$handler, &$cb) {
				$__hx__switch = ($end->index);
				if ($__hx__switch === 0) {
					$cb(Conclusion::Halted($end->params[0]->idealize($_gthis->rescue)));
				} else if ($__hx__switch === 1) {
					$cb(Conclusion::Clogged($end->params[0], $end->params[1]->idealize($_gthis->rescue)));
				} else if ($__hx__switch === 2) {
					($_gthis->rescue)($end->params[0])->idealize($_gthis->rescue)->forEach($handler)->handle($cb);
				} else if ($__hx__switch === 3) {
					$cb(Conclusion::Depleted());
				}
			});
		});
	}

	/**
	 * @return bool
	 */
	public function get_depleted () {
		return $this->target->get_depleted();
	}

	/**
	 * @return FutureObject
	 */
	public function next () {
		$_gthis = $this;
		return $this->target->next()->flatMap(function ($v) use (&$_gthis) {
			if ($v->index === 1) {
				return ($_gthis->rescue)($v->params[0])->idealize($_gthis->rescue)->next();
			} else {
				return new SyncFuture(new LazyConst($v));
			}
		})->gather();
	}
}

Boot::registerClass(IdealizeStream::class, 'tink.streams.IdealizeStream');
