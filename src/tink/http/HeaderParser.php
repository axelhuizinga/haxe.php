<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace tink\http;

use \php\_Boot\HxAnon;
use \php\Boot;
use \tink\core\TypedError;
use \tink\io\ParseStep;
use \tink\io\BytewiseParser;

class HeaderParser extends BytewiseParser {
	/**
	 * @var ParseStep
	 */
	static public $INVALID;

	/**
	 * @var \StringBuf
	 */
	public $buf;
	/**
	 * @var \Array_hx
	 */
	public $fields;
	/**
	 * @var mixed
	 */
	public $header;
	/**
	 * @var int
	 */
	public $last;
	/**
	 * @var \Closure
	 */
	public $makeHeader;

	/**
	 * @param \Closure $makeHeader
	 * 
	 * @return void
	 */
	public function __construct ($makeHeader) {
		$this->last = -1;
		$this->buf = new \StringBuf();
		$this->makeHeader = $makeHeader;
	}

	/**
	 * @return ParseStep
	 */
	public function nextLine () {
		$line = $this->buf->b;
		$this->buf = new \StringBuf();
		$this->last = -1;
		if ($line === "") {
			if ($this->header === null) {
				return ParseStep::Progressed();
			} else {
				return ParseStep::Done($this->header);
			}
		} else if ($this->header === null) {
			$_g = ($this->makeHeader)($line, $this->fields = new \Array_hx());
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				$_g1 = $_g->params[0];
				if ($_g1 === null) {
					return ParseStep::Done($this->header = null);
				} else {
					$this->header = $_g1;
					return ParseStep::Progressed();
				}
			} else if ($__hx__switch === 1) {
				return ParseStep::Failed($_g->params[0]);
			}
		} else {
			$_this = $this->fields;
			$x = HeaderField::ofString($line);
			$_this->arr[$_this->length++] = $x;
			return ParseStep::Progressed();
		}
	}

	/**
	 * @param int $c
	 * 
	 * @return ParseStep
	 */
	public function read ($c) {
		$_g = $this->last;
		if ($c === -1) {
			return $this->nextLine();
		} else if ($c === 10) {
			if ($_g === 13) {
				return $this->nextLine();
			} else {
				$this->last = $c;
				$_this = $this->buf;
				$_this->b = ($_this->b??'null') . (\mb_chr($c)??'null');
				return ParseStep::Progressed();
			}
		} else if ($c === 13) {
			if ($_g === 13) {
				$_this = $this->buf;
				$_this->b = ($_this->b??'null') . (\mb_chr($this->last)??'null');
				return ParseStep::Progressed();
			} else {
				$this->last = 13;
				return ParseStep::Progressed();
			}
		} else {
			if ($_g === 13) {
				$_this = $this->buf;
				$_this->b = ($_this->b??'null') . (\mb_chr($this->last)??'null');
				$_this = $this->buf;
				$_this->b = ($_this->b??'null') . (\mb_chr($c)??'null');
				$this->last = -1;
				return ParseStep::Progressed();
			} else {
				$this->last = $c;
				$_this = $this->buf;
				$_this->b = ($_this->b??'null') . (\mb_chr($c)??'null');
				return ParseStep::Progressed();
			}
		}
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$INVALID = ParseStep::Failed(new TypedError(422, "Invalid HTTP header", new HxAnon([
			"fileName" => "tink/http/Header.hx",
			"lineNumber" => 307,
			"className" => "tink.http.HeaderParser",
			"methodName" => "INVALID",
		])));
	}
}

Boot::registerClass(HeaderParser::class, 'tink.http.HeaderParser');
HeaderParser::__hx__init();
