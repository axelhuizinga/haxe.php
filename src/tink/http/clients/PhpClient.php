<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace tink\http\clients;

use \php\_Boot\HxAnon;
use \tink\http\HeaderField;
use \sys\io\FileInput;
use \php\Boot;
use \tink\http\IncomingResponse;
use \tink\streams\Single;
use \tink\chunk\ByteChunk;
use \tink\core\Outcome;
use \tink\http\ResponseHeaderBase;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxString;
use \tink\core\_Future\Future_Impl_;
use \tink\_Url\Url_Impl_;
use \tink\http\ClientObject;
use \tink\http\OutgoingRequest;
use \tink\core\FutureObject;
use \tink\io\IdealSourceTools;

class PhpClient implements ClientObject {
	/**
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * @param OutgoingRequest $req
	 * 
	 * @return FutureObject
	 */
	public function request ($req) {
		return Future_Impl_::async(function ($cb) use (&$req) {
			IdealSourceTools::all($req->body)->handle(function ($chunk) use (&$req, &$cb) {
				$_g = new \Array_hx();
				$_this = $req->header->fields;
				$_g1_current = 0;
				while ($_g1_current < $_this->length) {
					$x = ($_this->arr[$_g1_current++] ?? null)->toString();
					$_g->arr[$_g->length++] = $x;
				}
				$ob = ($_g->join("\x0D\x0A")??'null') . "\x0D\x0A";
				$req1 = $req->header->method;
				$context = stream_context_create(((array)(new HxAnon(["http" => ((array)(new HxAnon([
					"header" => $ob,
					"method" => $req1,
					"content" => $chunk->toBytes()->b->s,
				])))]))));
				$result = new FileInput(\fopen(Url_Impl_::toString($req->header->url), "rb", false, $context));
				$rawHeaders = \Array_hx::wrap($http_response_header);
				$i = $rawHeaders->length;
				while ($i-- >= 0) {
					if (\StringTools::startsWith(($rawHeaders->arr[$i] ?? null), "HTTP/")) {
						break;
					}
				}
				$rawHeaders = $rawHeaders->slice($i);
				$head = HxString::split(($rawHeaders->arr[0] ?? null), " ");
				$_g = new \Array_hx();
				$_g1 = 1;
				$_g2 = $rawHeaders->length;
				while ($_g1 < $_g2) {
					$line = ($rawHeaders->arr[$_g1++] ?? null);
					$index = HxString::indexOf($line, ": ");
					$x = \mb_strtolower(\mb_substr($line, 0, $index));
					$x1 = new HeaderField($x, \mb_substr($line, $index + 2, null));
					$_g->arr[$_g->length++] = $x1;
				}
				$statusCode = \Std::parseInt(($head->arr[1] ?? null));
				$this1 = new ResponseHeaderBase($statusCode, $head->slice(2)->join(" "), $_g, "HTTP/1.1");
				$cb(Outcome::Success(new IncomingResponse($this1, new Single(new LazyConst(ByteChunk::of($result->readAll()))))));
			});
		});
	}
}

Boot::registerClass(PhpClient::class, 'tink.http.clients.PhpClient');
