<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace tink\http\clients;

use \tink\http\IncomingRequest;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\http\IncomingResponse;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\http\IncomingRequestHeader;
use \tink\core\_Future\Future_Impl_;
use \tink\_Url\Url_Impl_;
use \tink\http\ClientObject;
use \tink\http\IncomingRequestBody;
use \tink\http\OutgoingRequest;
use \tink\http\containers\LocalContainer;
use \tink\core\FutureObject;

class LocalContainerClient implements ClientObject {
	/**
	 * @var LocalContainer
	 */
	public $container;

	/**
	 * @param LocalContainer $container
	 * 
	 * @return void
	 */
	public function __construct ($container) {
		$this->container = $container;
	}

	/**
	 * @param OutgoingRequest $req
	 * 
	 * @return FutureObject
	 */
	public function request ($req) {
		$tmp = $this->container;
		$req1 = $req->header->method;
		$this1 = $req->header->url;
		$tmp1 = new IncomingRequestHeader($req1, Url_Impl_::fromString(($this1->query === null ? $this1->path : ((($this1->path === null ? "null" : $this1->path))??'null') . "?" . ((($this1->query === null ? "null" : $this1->query))??'null'))), "HTTP/1.1", $req->header->fields);
		return Future_Impl_::next($tmp->serve(new IncomingRequest("127.0.0.1", $tmp1, IncomingRequestBody::Plain($req->body))), function ($res) {
			return new SyncFuture(new LazyConst(Outcome::Success(new IncomingResponse($res->header, $res->body))));
		});
	}
}

Boot::registerClass(LocalContainerClient::class, 'tink.http.clients.LocalContainerClient');
