<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace tink\semver\_Version;

use \php\_Boot\HxAnon;
use \tink\semver\_Constraint\Constraint_Impl_;
use \php\Boot;
use \tink\semver\Parser;
use \tink\core\TypedError;
use \tink\core\Outcome;
use \tink\core\OutcomeTools;
use \tink\parse\_StringSlice\StringSlice_Impl_;

final class Version_Impl_ {

	/**
	 * @param int $major
	 * @param int $minor
	 * @param int $patch
	 * 
	 * @return Data
	 */
	public static function _new ($major, $minor = 0, $patch = 0) {
		if ($minor === null) {
			$minor = 0;
		}
		if ($patch === null) {
			$patch = 0;
		}
		return new Data($major, $minor, $patch);
	}

	/**
	 * @param Data $this
	 * @param int $num
	 * 
	 * @return Data
	 */
	public static function alpha ($this1, $num = null) {
		return new Data($this1->major, $this1->minor, $this1->patch, "alpha", $num);
	}

	/**
	 * @param Data $this
	 * @param int $num
	 * 
	 * @return Data
	 */
	public static function beta ($this1, $num = null) {
		return new Data($this1->major, $this1->minor, $this1->patch, "beta", $num);
	}

	/**
	 * @param Data $this
	 * @param int $a
	 * @param int $b
	 * 
	 * @return int
	 */
	public static function cmp ($this1, $a, $b) {
		$i = $a - $b;
		if ($i > 0) {
			return 1;
		} else if ($i < 0) {
			return -1;
		} else {
			return 0;
		}
	}

	/**
	 * @param Data $this
	 * @param Data $that
	 * 
	 * @return int
	 */
	public static function compare ($this1, $that) {
		$i = $this1->major - $that->major;
		$i1 = $this1->minor - $that->minor;
		$i2 = $this1->patch - $that->patch;
		$i3 = Version_Impl_::idx($this1, $this1->preview) - Version_Impl_::idx($this1, $that->preview);
		$i4 = $this1->previewNum - $that->previewNum;
		return Comparison_Impl_::chain(Comparison_Impl_::chain(Comparison_Impl_::chain(Comparison_Impl_::chain(($i > 0 ? 1 : ($i < 0 ? -1 : 0)), ($i1 > 0 ? 1 : ($i1 < 0 ? -1 : 0))), ($i2 > 0 ? 1 : ($i2 < 0 ? -1 : 0))), ($i3 > 0 ? 1 : ($i3 < 0 ? -1 : 0))), ($i4 > 0 ? 1 : ($i4 < 0 ? -1 : 0)));
	}

	/**
	 * @param Data $a
	 * @param Data $b
	 * 
	 * @return bool
	 */
	public static function eq ($a, $b) {
		return Version_Impl_::compare($a, $b) === 0;
	}

	/**
	 * @param string $v
	 * 
	 * @return Data
	 */
	public static function fromStringly ($v) {
		return OutcomeTools::sure(Version_Impl_::parse($v));
	}

	/**
	 * @param Data $this
	 * 
	 * @return int
	 */
	public static function get_major ($this1) {
		return $this1->major;
	}

	/**
	 * @param Data $this
	 * 
	 * @return int
	 */
	public static function get_minor ($this1) {
		return $this1->minor;
	}

	/**
	 * @param Data $this
	 * 
	 * @return int
	 */
	public static function get_patch ($this1) {
		return $this1->patch;
	}

	/**
	 * @param Data $this
	 * 
	 * @return string
	 */
	public static function get_preview ($this1) {
		return $this1->preview;
	}

	/**
	 * @param Data $this
	 * 
	 * @return int
	 */
	public static function get_previewNum ($this1) {
		return $this1->previewNum;
	}

	/**
	 * @param Data $a
	 * @param Data $b
	 * 
	 * @return bool
	 */
	public static function gt ($a, $b) {
		return Version_Impl_::compare($a, $b) === 1;
	}

	/**
	 * @param Data $a
	 * @param Data $b
	 * 
	 * @return bool
	 */
	public static function gte ($a, $b) {
		return Version_Impl_::compare($a, $b) !== -1;
	}

	/**
	 * @param Data $this
	 * @param string $p
	 * 
	 * @return int
	 */
	public static function idx ($this1, $p) {
		if ($p === null) {
			return 100;
		} else {
			if ($p === "alpha") {
				return 1;
			} else if ($p === "beta") {
				return 2;
			} else if ($p === "rc") {
				return 3;
			}
		}
	}

	/**
	 * @param Data $a
	 * @param Data $b
	 * 
	 * @return bool
	 */
	public static function lt ($a, $b) {
		return Version_Impl_::compare($a, $b) === -1;
	}

	/**
	 * @param Data $a
	 * @param Data $b
	 * 
	 * @return bool
	 */
	public static function lte ($a, $b) {
		return Version_Impl_::compare($a, $b) !== 1;
	}

	/**
	 * @param Data $a
	 * @param Data $b
	 * 
	 * @return bool
	 */
	public static function neq ($a, $b) {
		return Version_Impl_::compare($a, $b) !== 0;
	}

	/**
	 * @param Data $this
	 * 
	 * @return Data
	 */
	public static function nextMajor ($this1) {
		return new Data($this1->major + 1, 0, 0);
	}

	/**
	 * @param Data $this
	 * 
	 * @return Data
	 */
	public static function nextMinor ($this1) {
		return new Data($this1->major, $this1->minor + 1, 0);
	}

	/**
	 * @param Data $this
	 * 
	 * @return Data
	 */
	public static function nextPatch ($this1) {
		return new Data($this1->major, $this1->minor, $this1->patch + 1);
	}

	/**
	 * @param string $s
	 * 
	 * @return Outcome
	 */
	public static function parse ($s) {
		return TypedError::catchExceptions(Boot::getInstanceClosure(new Parser(StringSlice_Impl_::ofString($s)), 'parseVersion'), Boot::getStaticClosure(Version_Impl_::class, 'reportError'), new HxAnon([
			"fileName" => "tink/semver/Version.hx",
			"lineNumber" => 97,
			"className" => "tink.semver._Version.Version_Impl_",
			"methodName" => "parse",
		]));
	}

	/**
	 * @param Data $this
	 * @param string $kind
	 * @param int $num
	 * 
	 * @return Data
	 */
	public static function prerelease ($this1, $kind, $num = null) {
		return new Data($this1->major, $this1->minor, $this1->patch, $kind, $num);
	}

	/**
	 * @param Data $a
	 * @param Data $b
	 * 
	 * @return \Array_hx
	 */
	public static function range ($a, $b) {
		return Constraint_Impl_::range($a, $b);
	}

	/**
	 * @param Data $this
	 * @param int $num
	 * 
	 * @return Data
	 */
	public static function rc ($this1, $num = null) {
		return new Data($this1->major, $this1->minor, $this1->patch, "rc", $num);
	}

	/**
	 * @param mixed $d
	 * 
	 * @return TypedError
	 */
	public static function reportError ($d) {
		if (is_string($d)) {
			return new TypedError(422, $d, new HxAnon([
				"fileName" => "tink/semver/Version.hx",
				"lineNumber" => 103,
				"className" => "tink.semver._Version.Version_Impl_",
				"methodName" => "reportError",
			]));
		} else {
			return TypedError::withData(422, \Std::string($d), $d, new HxAnon([
				"fileName" => "tink/semver/Version.hx",
				"lineNumber" => 105,
				"className" => "tink.semver._Version.Version_Impl_",
				"methodName" => "reportError",
			]));
		}
	}

	/**
	 * @param Data $this
	 * 
	 * @return Data
	 */
	public static function stable ($this1) {
		return new Data($this1->major, $this1->minor, $this1->patch);
	}

	/**
	 * @param Data $this
	 * 
	 * @return string
	 */
	public static function toString ($this1) {
		return $this1->toString();
	}

	/**
	 * @param Data $this
	 * 
	 * @return string
	 */
	public static function toStringly ($this1) {
		return $this1->toString();
	}
}

Boot::registerClass(Version_Impl_::class, 'tink.semver._Version.Version_Impl_');
Boot::registerGetters('tink\\semver\\_Version\\Version_Impl_', [
	'previewNum' => true,
	'preview' => true,
	'patch' => true,
	'minor' => true,
	'major' => true
]);
