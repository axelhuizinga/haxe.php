<?php
/**
 * Generated by Haxe 4.1.3
 */

namespace tink\semver;

use \php\_Boot\HxAnon;
use \haxe\ds\Option;
use \php\Boot;
use \tink\semver\_Version\Version_Impl_;
use \tink\semver\_Version\Data;

class RangeTools {
	/**
	 * @param object $r
	 * @param Data $v
	 * 
	 * @return bool
	 */
	public static function contains ($r, $v) {
		$tmp = null;
		$_g = $r->min;
		$__hx__switch = ($_g->index);
		if ($__hx__switch === 0) {
			$tmp = true;
		} else if ($__hx__switch === 1) {
			$tmp = Version_Impl_::lt($_g->params[0], $v);
		} else if ($__hx__switch === 2) {
			$tmp = Version_Impl_::lte($_g->params[0], $v);
		}
		if ($tmp) {
			$_g = $r->max;
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				return true;
			} else if ($__hx__switch === 1) {
				return Version_Impl_::gt($_g->params[0], $v);
			} else if ($__hx__switch === 2) {
				return Version_Impl_::gte($_g->params[0], $v);
			}
		} else {
			return false;
		}
	}

	/**
	 * @param object $a
	 * @param object $b
	 * 
	 * @return Option
	 */
	public static function intersect ($a, $b) {
		return RangeTools::nonEmpty(new HxAnon([
			"min" => BoundTools::max($a->min, $b->min, ExtremumKind::Lower()),
			"max" => BoundTools::min($a->max, $b->max, ExtremumKind::Upper()),
		]));
	}

	/**
	 * @param object $a
	 * @param object $b
	 * 
	 * @return Option
	 */
	public static function merge ($a, $b) {
		$_g = $a->min;
		$_g1 = $a->max;
		$__hx__switch = ($_g1->index);
		if ($__hx__switch === 1) {
			$_g2 = $b->min;
			$_g3 = $b->max;
			if ($_g2->index === 2) {
				if (Version_Impl_::eq($_g1->params[0], $_g2->params[0])) {
					return Option::Some(new HxAnon([
						"min" => $_g,
						"max" => $_g3,
					]));
				} else {
					$__hx__switch = ($_g3->index);
					if ($__hx__switch === 1) {
						if ($_g->index === 2) {
							if (Version_Impl_::eq($_g->params[0], $_g3->params[0])) {
								return Option::Some(new HxAnon([
									"min" => $_g2,
									"max" => $_g1,
								]));
							} else if (RangeTools::intersect($a, $b) !== Option::None()) {
								return Option::Some(new HxAnon([
									"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
									"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
								]));
							} else {
								return Option::None();
							}
						} else if (RangeTools::intersect($a, $b) !== Option::None()) {
							return Option::Some(new HxAnon([
								"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
								"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
							]));
						} else {
							return Option::None();
						}
					} else if ($__hx__switch === 2) {
						if ($_g->index === 1) {
							if (Version_Impl_::eq($_g->params[0], $_g3->params[0])) {
								return Option::Some(new HxAnon([
									"min" => $_g2,
									"max" => $_g1,
								]));
							} else if (RangeTools::intersect($a, $b) !== Option::None()) {
								return Option::Some(new HxAnon([
									"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
									"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
								]));
							} else {
								return Option::None();
							}
						} else if (RangeTools::intersect($a, $b) !== Option::None()) {
							return Option::Some(new HxAnon([
								"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
								"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
							]));
						} else {
							return Option::None();
						}
					} else {
						if (RangeTools::intersect($a, $b) !== Option::None()) {
							return Option::Some(new HxAnon([
								"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
								"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
							]));
						} else {
							return Option::None();
						}
					}
				}
			} else {
				$__hx__switch = ($_g3->index);
				if ($__hx__switch === 1) {
					if ($_g->index === 2) {
						if (Version_Impl_::eq($_g->params[0], $_g3->params[0])) {
							return Option::Some(new HxAnon([
								"min" => $_g2,
								"max" => $_g1,
							]));
						} else if (RangeTools::intersect($a, $b) !== Option::None()) {
							return Option::Some(new HxAnon([
								"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
								"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
							]));
						} else {
							return Option::None();
						}
					} else if (RangeTools::intersect($a, $b) !== Option::None()) {
						return Option::Some(new HxAnon([
							"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
							"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
						]));
					} else {
						return Option::None();
					}
				} else if ($__hx__switch === 2) {
					if ($_g->index === 1) {
						if (Version_Impl_::eq($_g->params[0], $_g3->params[0])) {
							return Option::Some(new HxAnon([
								"min" => $_g2,
								"max" => $_g1,
							]));
						} else if (RangeTools::intersect($a, $b) !== Option::None()) {
							return Option::Some(new HxAnon([
								"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
								"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
							]));
						} else {
							return Option::None();
						}
					} else if (RangeTools::intersect($a, $b) !== Option::None()) {
						return Option::Some(new HxAnon([
							"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
							"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
						]));
					} else {
						return Option::None();
					}
				} else {
					if (RangeTools::intersect($a, $b) !== Option::None()) {
						return Option::Some(new HxAnon([
							"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
							"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
						]));
					} else {
						return Option::None();
					}
				}
			}
		} else if ($__hx__switch === 2) {
			$_g2 = $b->min;
			$_g3 = $b->max;
			if ($_g2->index === 1) {
				if (Version_Impl_::eq($_g1->params[0], $_g2->params[0])) {
					return Option::Some(new HxAnon([
						"min" => $_g,
						"max" => $_g3,
					]));
				} else {
					$__hx__switch = ($_g3->index);
					if ($__hx__switch === 1) {
						if ($_g->index === 2) {
							if (Version_Impl_::eq($_g->params[0], $_g3->params[0])) {
								return Option::Some(new HxAnon([
									"min" => $_g2,
									"max" => $_g1,
								]));
							} else if (RangeTools::intersect($a, $b) !== Option::None()) {
								return Option::Some(new HxAnon([
									"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
									"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
								]));
							} else {
								return Option::None();
							}
						} else if (RangeTools::intersect($a, $b) !== Option::None()) {
							return Option::Some(new HxAnon([
								"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
								"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
							]));
						} else {
							return Option::None();
						}
					} else if ($__hx__switch === 2) {
						if ($_g->index === 1) {
							if (Version_Impl_::eq($_g->params[0], $_g3->params[0])) {
								return Option::Some(new HxAnon([
									"min" => $_g2,
									"max" => $_g1,
								]));
							} else if (RangeTools::intersect($a, $b) !== Option::None()) {
								return Option::Some(new HxAnon([
									"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
									"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
								]));
							} else {
								return Option::None();
							}
						} else if (RangeTools::intersect($a, $b) !== Option::None()) {
							return Option::Some(new HxAnon([
								"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
								"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
							]));
						} else {
							return Option::None();
						}
					} else {
						if (RangeTools::intersect($a, $b) !== Option::None()) {
							return Option::Some(new HxAnon([
								"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
								"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
							]));
						} else {
							return Option::None();
						}
					}
				}
			} else {
				$__hx__switch = ($_g3->index);
				if ($__hx__switch === 1) {
					if ($_g->index === 2) {
						if (Version_Impl_::eq($_g->params[0], $_g3->params[0])) {
							return Option::Some(new HxAnon([
								"min" => $_g2,
								"max" => $_g1,
							]));
						} else if (RangeTools::intersect($a, $b) !== Option::None()) {
							return Option::Some(new HxAnon([
								"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
								"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
							]));
						} else {
							return Option::None();
						}
					} else if (RangeTools::intersect($a, $b) !== Option::None()) {
						return Option::Some(new HxAnon([
							"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
							"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
						]));
					} else {
						return Option::None();
					}
				} else if ($__hx__switch === 2) {
					if ($_g->index === 1) {
						if (Version_Impl_::eq($_g->params[0], $_g3->params[0])) {
							return Option::Some(new HxAnon([
								"min" => $_g2,
								"max" => $_g1,
							]));
						} else if (RangeTools::intersect($a, $b) !== Option::None()) {
							return Option::Some(new HxAnon([
								"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
								"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
							]));
						} else {
							return Option::None();
						}
					} else if (RangeTools::intersect($a, $b) !== Option::None()) {
						return Option::Some(new HxAnon([
							"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
							"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
						]));
					} else {
						return Option::None();
					}
				} else {
					if (RangeTools::intersect($a, $b) !== Option::None()) {
						return Option::Some(new HxAnon([
							"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
							"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
						]));
					} else {
						return Option::None();
					}
				}
			}
		} else {
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 1) {
				$_g2 = $b->max;
				if ($_g2->index === 2) {
					if (Version_Impl_::eq($_g->params[0], $_g2->params[0])) {
						return Option::Some(new HxAnon([
							"min" => $b->min,
							"max" => $_g1,
						]));
					} else if (RangeTools::intersect($a, $b) !== Option::None()) {
						return Option::Some(new HxAnon([
							"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
							"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
						]));
					} else {
						return Option::None();
					}
				} else if (RangeTools::intersect($a, $b) !== Option::None()) {
					return Option::Some(new HxAnon([
						"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
						"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
					]));
				} else {
					return Option::None();
				}
			} else if ($__hx__switch === 2) {
				$_g2 = $b->max;
				if ($_g2->index === 1) {
					if (Version_Impl_::eq($_g->params[0], $_g2->params[0])) {
						return Option::Some(new HxAnon([
							"min" => $b->min,
							"max" => $_g1,
						]));
					} else if (RangeTools::intersect($a, $b) !== Option::None()) {
						return Option::Some(new HxAnon([
							"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
							"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
						]));
					} else {
						return Option::None();
					}
				} else if (RangeTools::intersect($a, $b) !== Option::None()) {
					return Option::Some(new HxAnon([
						"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
						"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
					]));
				} else {
					return Option::None();
				}
			} else {
				if (RangeTools::intersect($a, $b) !== Option::None()) {
					return Option::Some(new HxAnon([
						"min" => BoundTools::min($a->min, $b->min, ExtremumKind::Lower()),
						"max" => BoundTools::max($a->max, $b->max, ExtremumKind::Upper()),
					]));
				} else {
					return Option::None();
				}
			}
		}
	}

	/**
	 * @param object $r
	 * 
	 * @return Option
	 */
	public static function nonEmpty ($r) {
		if (BoundTools::isLowerThan($r->min, $r->max)) {
			return Option::Some($r);
		} else {
			return Option::None();
		}
	}

	/**
	 * @param object $a
	 * 
	 * @return string
	 */
	public static function toString ($a) {
		$_g = $a->max;
		$_g1 = $a->min;
		if ($_g1->index === 2) {
			$_g2 = $_g1->params[0];
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 1) {
				$_g1 = $_g->params[0];
				if (Version_Impl_::eq(Version_Impl_::nextMajor($_g2), $_g1) && ($_g2->major > 0)) {
					return "^" . ((($_g2 === null ? "null" : $_g2->toString()))??'null');
				} else if (Version_Impl_::eq(Version_Impl_::nextMinor($_g2), $_g1) && ($_g2->major === 0)) {
					return "^" . ((($_g2 === null ? "null" : $_g2->toString()))??'null');
				} else {
					$_g1 = $a->min;
					$tmp = null;
					$__hx__switch = ($_g1->index);
					if ($__hx__switch === 0) {
						$tmp = "";
					} else if ($__hx__switch === 1) {
						$_g3 = $_g1->params[0];
						$tmp = ">" . ((($_g3 === null ? "null" : $_g3->toString()))??'null');
					} else if ($__hx__switch === 2) {
						$_g3 = $_g1->params[0];
						$tmp = ">=" . ((($_g3 === null ? "null" : $_g3->toString()))??'null');
					}
					$tmp1 = ($tmp??'null') . " ";
					$_g1 = $a->max;
					$tmp = null;
					$__hx__switch = ($_g1->index);
					if ($__hx__switch === 0) {
						$tmp = "";
					} else if ($__hx__switch === 1) {
						$_g3 = $_g1->params[0];
						$tmp = "<" . ((($_g3 === null ? "null" : $_g3->toString()))??'null');
					} else if ($__hx__switch === 2) {
						$_g3 = $_g1->params[0];
						$tmp = "<=" . ((($_g3 === null ? "null" : $_g3->toString()))??'null');
					}
					return ($tmp1??'null') . ($tmp??'null');
				}
			} else if ($__hx__switch === 2) {
				$_g1 = $_g->params[0];
				if (Version_Impl_::eq($_g2, $_g1)) {
					return "=" . ((($_g2 === null ? "null" : $_g2->toString()))??'null');
				} else {
					return "" . ((($_g2 === null ? "null" : $_g2->toString()))??'null') . " - " . ((($_g1 === null ? "null" : $_g1->toString()))??'null');
				}
			} else {
				$_g = $a->min;
				$tmp = null;
				$__hx__switch = ($_g->index);
				if ($__hx__switch === 0) {
					$tmp = "";
				} else if ($__hx__switch === 1) {
					$_g1 = $_g->params[0];
					$tmp = ">" . ((($_g1 === null ? "null" : $_g1->toString()))??'null');
				} else if ($__hx__switch === 2) {
					$_g1 = $_g->params[0];
					$tmp = ">=" . ((($_g1 === null ? "null" : $_g1->toString()))??'null');
				}
				$tmp1 = ($tmp??'null') . " ";
				$_g = $a->max;
				$tmp = null;
				$__hx__switch = ($_g->index);
				if ($__hx__switch === 0) {
					$tmp = "";
				} else if ($__hx__switch === 1) {
					$_g1 = $_g->params[0];
					$tmp = "<" . ((($_g1 === null ? "null" : $_g1->toString()))??'null');
				} else if ($__hx__switch === 2) {
					$_g1 = $_g->params[0];
					$tmp = "<=" . ((($_g1 === null ? "null" : $_g1->toString()))??'null');
				}
				return ($tmp1??'null') . ($tmp??'null');
			}
		} else {
			$_g = $a->min;
			$tmp = null;
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				$tmp = "";
			} else if ($__hx__switch === 1) {
				$_g1 = $_g->params[0];
				$tmp = ">" . ((($_g1 === null ? "null" : $_g1->toString()))??'null');
			} else if ($__hx__switch === 2) {
				$_g1 = $_g->params[0];
				$tmp = ">=" . ((($_g1 === null ? "null" : $_g1->toString()))??'null');
			}
			$tmp1 = ($tmp??'null') . " ";
			$_g = $a->max;
			$tmp = null;
			$__hx__switch = ($_g->index);
			if ($__hx__switch === 0) {
				$tmp = "";
			} else if ($__hx__switch === 1) {
				$_g1 = $_g->params[0];
				$tmp = "<" . ((($_g1 === null ? "null" : $_g1->toString()))??'null');
			} else if ($__hx__switch === 2) {
				$_g1 = $_g->params[0];
				$tmp = "<=" . ((($_g1 === null ? "null" : $_g1->toString()))??'null');
			}
			return ($tmp1??'null') . ($tmp??'null');
		}
	}
}

Boot::registerClass(RangeTools::class, 'tink.semver.RangeTools');
