<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace thenshim\_Promise;

use \thenshim\PromiseFactory;
use \php\Boot;
use \thenshim\fallback\FallbackPromiseFactory;
use \thenshim\Thenable;

final class Promise_Impl_ {
	/**
	 * @var PromiseFactory
	 * Factory that calls the methods to create promises on the current target.
	 *
	 * - On JS, it is `JSPromiseFactory`
	 * - Otherwise, it is `FallbackPromiseFactory`
	 */
	static public $factory;

	/**
	 * Wrap an implementation as a JavaScript-style promise.
	 * @param executor Callback function with resolve and reject functions.
	 * 
	 * @param \Closure $executor
	 * 
	 * @return Thenable
	 */
	public static function _new ($executor) {
		return Promise_Impl_::$factory->make($executor);
	}

	/**
	 * Returns a settled promise that is rejected with the given reason.
	 * 
	 * @param mixed $reason
	 * 
	 * @return Thenable
	 */
	public static function reject ($reason) {
		return Promise_Impl_::$factory->asRejected($reason);
	}

	/**
	 * Returns a settled promise or flattened promise.
	 *
	 * - When given a value, it returns a settled promise that is fulfilled
	 *   with the given value (as a convenience function).
	 * - When given a `Promise`, it returns the promise itself.
	 * - When given a `Thenable`, it returns a new promise that reflects
	 *   the `Thenable`'s state.
	 * 
	 * @param mixed $object
	 * 
	 * @return Thenable
	 */
	public static function resolve ($object) {
		return Promise_Impl_::$factory->asResolved($object);
	}

	/**
	 * Calls the given callbacks when this promise is settled.
	 *
	 * @see `Thenable.then` for callback descriptions.
	 * 
	 * @param Thenable $this
	 * @param \Closure $onFulfilled
	 * @param \Closure $onRejected
	 * 
	 * @return Thenable
	 */
	public static function then ($this1, $onFulfilled, $onRejected = null) {
		return $this1->then($onFulfilled, $onRejected);
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;


		self::$factory = new FallbackPromiseFactory();
	}
}

Boot::registerClass(Promise_Impl_::class, 'thenshim._Promise.Promise_Impl_');
Promise_Impl_::__hx__init();
