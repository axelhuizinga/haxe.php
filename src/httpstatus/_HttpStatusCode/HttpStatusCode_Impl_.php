<?php
/**
 * Generated by Haxe 4.1.5
 */

namespace httpstatus\_HttpStatusCode;

use \tink\http\HeaderField;
use \php\Boot;
use \tink\http\IncomingResponse;
use \tink\io\_Source\Source_Impl_;
use \tink\http\ResponseHeaderBase;
use \httpstatus\_HttpStatusMessage\HttpStatusMessage_Impl_;
use \tink\http\_Response\OutgoingResponseData;

final class HttpStatusCode_Impl_ {

	/**
	 * @param int $code
	 * 
	 * @return int
	 */
	public static function fromErrorCode ($code) {
		return $code;
	}

	/**
	 * @param IncomingResponse $res
	 * 
	 * @return int
	 */
	public static function fromIncomingResponse ($res) {
		return $res->header->statusCode;
	}

	/**
	 * @param int $this
	 * 
	 * @return int
	 */
	public static function toInt ($this1) {
		return $this1;
	}

	/**
	 * @param int $this
	 * 
	 * @return string
	 */
	public static function toMessage ($this1) {
		return HttpStatusMessage_Impl_::fromCode($this1);
	}

	/**
	 * @param int $this
	 * 
	 * @return OutgoingResponseData
	 */
	public static function toOutgoingResponse ($this1) {
		return new OutgoingResponseData(new ResponseHeaderBase($this1, HttpStatusMessage_Impl_::fromCode($this1), \Array_hx::wrap([new HeaderField("content-length", "0")]), "HTTP/1.1"), Source_Impl_::$EMPTY);
	}
}

Boot::registerClass(HttpStatusCode_Impl_::class, 'httpstatus._HttpStatusCode.HttpStatusCode_Impl_');
