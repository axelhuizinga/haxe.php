<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace _UnicodeString;

use \haxe\io\Encoding;
use \php\Boot;
use \haxe\Exception;
use \haxe\iterators\StringKeyValueIteratorUnicode;
use \haxe\io\Bytes;
use \haxe\iterators\StringIteratorUnicode;

final class UnicodeString_Impl_ {
	/**
	 * Creates an instance of UnicodeString.
	 * 
	 * @param string $string
	 * 
	 * @return string
	 */
	public static function _new ($string) {
		return $string;
	}

	/**
	 * Returns an iterator of the unicode code points.
	 * 
	 * @param string $this
	 * 
	 * @return StringIteratorUnicode
	 */
	public static function iterator ($this1) {
		return new StringIteratorUnicode($this1);
	}

	/**
	 * Returns an iterator of the code point indices and unicode code points.
	 * 
	 * @param string $this
	 * 
	 * @return StringKeyValueIteratorUnicode
	 */
	public static function keyValueIterator ($this1) {
		return new StringKeyValueIteratorUnicode($this1);
	}

	/**
	 * Tells if `b` is a correctly encoded UTF8 byte sequence.
	 * 
	 * @param Bytes $b
	 * @param Encoding $encoding
	 * 
	 * @return bool
	 */
	public static function validate ($b, $encoding) {
		$__hx__switch = ($encoding->index);
		if ($__hx__switch === 0) {
			$data = $b->b;
			$pos = 0;
			$max = $b->length;
			while ($pos < $max) {
				$c = \ord($data->s[$pos++]);
				if ($c >= 128) {
					if ($c < 194) {
						return false;
					} else if ($c < 224) {
						if (($pos + 1) > $max) {
							return false;
						}
						$c2 = \ord($data->s[$pos++]);
						if (($c2 < 128) || ($c2 > 191)) {
							return false;
						}
					} else if ($c < 240) {
						if (($pos + 2) > $max) {
							return false;
						}
						$c21 = \ord($data->s[$pos++]);
						if ($c === 224) {
							if (($c21 < 160) || ($c21 > 191)) {
								return false;
							}
						} else if (($c21 < 128) || ($c21 > 191)) {
							return false;
						}
						$c3 = \ord($data->s[$pos++]);
						if (($c3 < 128) || ($c3 > 191)) {
							return false;
						}
						$c = ($c << 16) | ($c21 << 8) | $c3;
						if ((15573120 <= $c) && ($c <= 15581119)) {
							return false;
						}
					} else if ($c > 244) {
						return false;
					} else {
						if (($pos + 3) > $max) {
							return false;
						}
						$c22 = \ord($data->s[$pos++]);
						if ($c === 240) {
							if (($c22 < 144) || ($c22 > 191)) {
								return false;
							}
						} else if ($c === 244) {
							if (($c22 < 128) || ($c22 > 143)) {
								return false;
							}
						} else if (($c22 < 128) || ($c22 > 191)) {
							return false;
						}
						$c31 = \ord($data->s[$pos++]);
						if (($c31 < 128) || ($c31 > 191)) {
							return false;
						}
						$c4 = \ord($data->s[$pos++]);
						if (($c4 < 128) || ($c4 > 191)) {
							return false;
						}
					}
				}
			}
			return true;
		} else if ($__hx__switch === 1) {
			throw Exception::thrown("UnicodeString.validate: RawNative encoding is not supported");
		}
	}
}

Boot::registerClass(UnicodeString_Impl_::class, '_UnicodeString.UnicodeString_Impl_');
