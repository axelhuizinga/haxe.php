<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace php;

use \php\_Boot\HxAnon;
use \haxe\Exception;

/**
 * Session consists of a way to preserve certain data across
 * subsequent accesses.
 */
class Session {
	/**
	 * @var bool
	 */
	static public $started;

	/**
	 * @return void
	 */
	public static function clear () {
		\session_unset();
	}

	/**
	 * @return void
	 */
	public static function close () {
		\session_write_close();
		Session::$started = false;
	}

	/**
	 * @param string $name
	 * 
	 * @return bool
	 */
	public static function exists ($name) {
		Session::start();
		return \array_key_exists($name, $_SESSION);
	}

	/**
	 * @param string $name
	 * 
	 * @return mixed
	 */
	public static function get ($name) {
		Session::start();
		if (!isset($_SESSION[$name])) {
			return null;
		}
		return $_SESSION[$name];
	}

	/**
	 * @return int
	 */
	public static function getCacheExpire () {
		return \session_cache_expire();
	}

	/**
	 * @return CacheLimiter
	 */
	public static function getCacheLimiter () {
		$__hx__switch = (\session_cache_limiter());
		if ($__hx__switch === "nocache") {
			return CacheLimiter::NoCache();
		} else if ($__hx__switch === "private") {
			return CacheLimiter::Private();
		} else if ($__hx__switch === "private_no_expire") {
			return CacheLimiter::PrivateNoExpire();
		} else if ($__hx__switch === "public") {
			return CacheLimiter::Public();
		}
		return null;
	}

	/**
	 * @return object
	 */
	public static function getCookieParams () {
		return new HxAnon(\session_get_cookie_params());
	}

	/**
	 * @return string
	 */
	public static function getId () {
		return \session_id();
	}

	/**
	 * @return string
	 */
	public static function getModule () {
		return \session_module_name();
	}

	/**
	 * @return string
	 */
	public static function getName () {
		return \session_name();
	}

	/**
	 * @return string
	 */
	public static function getSavePath () {
		return \session_save_path();
	}

	/**
	 * @param bool $deleteold
	 * 
	 * @return bool
	 */
	public static function regenerateId ($deleteold = null) {
		return \session_regenerate_id($deleteold);
	}

	/**
	 * @param string $name
	 * 
	 * @return void
	 */
	public static function remove ($name) {
		Session::start();
		unset($_SESSION[$name]);
	}

	/**
	 * @param string $name
	 * @param mixed $value
	 * 
	 * @return mixed
	 */
	public static function set ($name, $value) {
		Session::start();
		return $_SESSION[$name] = $value;
	}

	/**
	 * @param int $minutes
	 * 
	 * @return void
	 */
	public static function setCacheExpire ($minutes) {
		if (Session::$started) {
			throw Exception::thrown("You can't set the cache expire time while the session is already in use");
		}
		\session_cache_expire($minutes);
	}

	/**
	 * @param CacheLimiter $l
	 * 
	 * @return void
	 */
	public static function setCacheLimiter ($l) {
		if (Session::$started) {
			throw Exception::thrown("You can't set the cache limiter while the session is already in use");
		}
		$__hx__switch = ($l->index);
		if ($__hx__switch === 0) {
			\session_cache_limiter("public");
		} else if ($__hx__switch === 1) {
			\session_cache_limiter("private");
		} else if ($__hx__switch === 2) {
			\session_cache_limiter("nocache");
		} else if ($__hx__switch === 3) {
			\session_cache_limiter("private_no_expire");
		}
	}

	/**
	 * @param int $lifetime
	 * @param string $path
	 * @param string $domain
	 * @param bool $secure
	 * @param bool $httponly
	 * 
	 * @return void
	 */
	public static function setCookieParams ($lifetime = null, $path = null, $domain = null, $secure = null, $httponly = null) {
		if (Session::$started) {
			throw Exception::thrown("You can't set the cookie params while the session is already in use");
		}
		\session_set_cookie_params($lifetime, $path, $domain, $secure, $httponly);
	}

	/**
	 * @param string $id
	 * 
	 * @return void
	 */
	public static function setId ($id) {
		if (Session::$started) {
			throw Exception::thrown("You can't set the session id while the session is already in use");
		}
		\session_id($id);
	}

	/**
	 * @param string $module
	 * 
	 * @return void
	 */
	public static function setModule ($module) {
		if (Session::$started) {
			throw Exception::thrown("You can't set the module while the session is already in use");
		}
		\session_module_name($module);
	}

	/**
	 * @param string $name
	 * 
	 * @return void
	 */
	public static function setName ($name) {
		if (Session::$started) {
			throw Exception::thrown("You can't set the name while the session is already in use");
		}
		\session_name($name);
	}

	/**
	 * @param \Closure $open
	 * @param \Closure $close
	 * @param \Closure $read
	 * @param \Closure $write
	 * @param \Closure $destroy
	 * @param \Closure $gc
	 * 
	 * @return bool
	 */
	public static function setSaveHandler ($open, $close, $read, $write, $destroy, $gc) {
		return \session_set_save_handler($open, $close, $read, $write, $destroy, $gc);
	}

	/**
	 * @param string $path
	 * 
	 * @return void
	 */
	public static function setSavePath ($path) {
		if (Session::$started) {
			throw Exception::thrown("You can't set the save path while the session is already in use");
		}
		\session_save_path($path);
	}

	/**
	 * @return void
	 */
	public static function start () {
		if (Session::$started) {
			return;
		}
		Session::$started = true;
		\session_start();
	}

	/**
	 * @internal
	 * @access private
	 */
	static public function __hx__init ()
	{
		static $called = false;
		if ($called) return;
		$called = true;

		Session::$started = isset($_SESSION);

	}
}

Boot::registerClass(Session::class, 'php.Session');
Session::__hx__init();
