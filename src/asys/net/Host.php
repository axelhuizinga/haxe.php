<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace asys\net;

use \sys\net\Host as NetHost;
use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \tink\core\TypedError;
use \tink\core\FutureTrigger;
use \tink\core\_Lazy\LazyConst;
use \php\_Boot\HxString;
use \tink\core\FutureObject;

class Host {
	/**
	 * @var string
	 */
	public $address;
	/**
	 * @var string
	 */
	public $host;
	/**
	 * @var NetHost
	 */
	public $instance;
	/**
	 * @var FutureObject
	 */
	public $ip;
	/**
	 * @var FutureTrigger
	 */
	public $ipTrigger;

	/**
	 * @return string
	 */
	public static function localhost () {
		return isset($_SERVER['HTTP_HOST']) ? $_SERVER['HTTP_HOST'] : 'localhost';
	}

	/**
	 * @param string $name
	 * 
	 * @return void
	 */
	public function __construct ($name) {
		$this->ipTrigger = new FutureTrigger();
		$this->host = $name;
		$this->instance = new NetHost($name);
		$this->address = \Std::string($this->instance);
		$this->ipTrigger->trigger($this->instance->ip);
	}

	/**
	 * @param mixed $err
	 * @param string $address
	 * @param mixed $_
	 * 
	 * @return void
	 */
	public function processIp ($err, $address, $_ = null) {
		if (($this->host === $address) || ($err !== null)) {
			$this->ipTrigger->trigger(0);
			return;
		}
		$this->address = $address;
		$parts = HxString::split($address, ".");
		$res = 0;
		$res = \Std::parseInt(($parts->arr[0] ?? null)) << 24;
		$res += \Std::parseInt(($parts->arr[1] ?? null)) << 16;
		$res += \Std::parseInt(($parts->arr[2] ?? null)) << 8;
		$res += \Std::parseInt(($parts->arr[3] ?? null));
		$this->ipTrigger->trigger($res);
	}

	/**
	 * @return FutureObject
	 */
	public function reverse () {
		return new SyncFuture(new LazyConst(TypedError::catchExceptions(Boot::getInstanceClosure($this->instance, 'reverse'), null, new HxAnon([
			"fileName" => "asys/net/Host.hx",
			"lineNumber" => 57,
			"className" => "asys.net.Host",
			"methodName" => "reverse",
		]))));
	}

	/**
	 * @return string
	 */
	public function toString () {
		return $this->address;
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(Host::class, 'asys.net.Host');
