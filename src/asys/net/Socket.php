<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace asys\net;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \tink\io\SinkObject;
use \php\Boot;
use \tink\io\std\InputSource;
use \haxe\Exception;
use \tink\core\Noise;
use \php\net\Socket as NetSocket;
use \tink\core\TypedError;
use \tink\streams\StreamObject;
use \tink\io\_Worker\Worker_Impl_;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \tink\io\_Sink\SinkYielding_Impl_;
use \haxe\io\Bytes;
use \haxe\NativeStackTrace;
use \tink\core\FutureObject;

class Socket {
	/**
	 * @var Host
	 */
	public $host;
	/**
	 * @var StreamObject
	 */
	public $input;
	/**
	 * @var SinkObject
	 */
	public $output;
	/**
	 * @var int
	 */
	public $port;
	/**
	 * @var NetSocket
	 */
	public $socket;

	/**
	 * @return void
	 */
	public function __construct () {
		$this->createSocket();
	}

	/**
	 * @return void
	 */
	public function close () {
		$this->socket->close();
	}

	/**
	 * @param Host $host
	 * @param int $port
	 * 
	 * @return FutureObject
	 */
	public function connect ($host, $port) {
		$this->host = $host;
		$this->port = $port;
		$v = null;
		try {
			$this->socket->connect($host->instance, $port);
			$this->setStreams();
			$v = Outcome::Success(Noise::Noise());
		} catch(\Throwable $_g) {
			NativeStackTrace::saveStack($_g);
			$v1 = \Std::string(Exception::caught($_g)->unwrap());
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/net/Socket.hx",
				"lineNumber" => 50,
				"className" => "asys.net.Socket",
				"methodName" => "connect",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @return void
	 */
	public function createSocket () {
		$this->socket = new NetSocket();
	}

	/**
	 * @return void
	 */
	public function setStreams () {
		$this->output = SinkYielding_Impl_::ofOutput("socket output", $this->socket->output);
		$input = $this->socket->input;
		$options = null;
		$options = new HxAnon();
		$tmp = Worker_Impl_::ensure($options->worker);
		$_g = $options->chunkSize;
		$this->input = new InputSource("socket input", $input, $tmp, Bytes::alloc(($_g === null ? 65536 : $_g)), 0);
	}

	/**
	 * @param float $timeout
	 * 
	 * @return void
	 */
	public function setTimeout ($timeout) {
		$this->socket->setTimeout($timeout);
	}
}

Boot::registerClass(Socket::class, 'asys.net.Socket');
