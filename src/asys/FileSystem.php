<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace asys;

use \php\_Boot\HxAnon;
use \tink\core\_Future\SyncFuture;
use \php\Boot;
use \haxe\Exception;
use \tink\core\Noise;
use \tink\core\TypedError;
use \sys\FileSystem as SysFileSystem;
use \tink\core\Outcome;
use \tink\core\_Lazy\LazyConst;
use \haxe\NativeStackTrace;
use \tink\core\FutureObject;

class FileSystem {
	/**
	 * @param string $relPath
	 * 
	 * @return string
	 */
	public static function absolutePath ($relPath) {
		return SysFileSystem::absolutePath($relPath);
	}

	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	public static function createDirectory ($path) {
		$v = null;
		try {
			SysFileSystem::createDirectory($path);
			$v = Outcome::Success(Noise::Noise());
		} catch(\Throwable $_g) {
			NativeStackTrace::saveStack($_g);
			$v1 = "" . (\Std::string(Exception::caught($_g)->unwrap())??'null');
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 279,
				"className" => "asys.FileSystem",
				"methodName" => "createDirectory",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	public static function deleteDirectory ($path) {
		$v = null;
		try {
			\rmdir($path);
			$v = Outcome::Success(Noise::Noise());
		} catch(\Throwable $_g) {
			NativeStackTrace::saveStack($_g);
			$v1 = "" . (\Std::string(Exception::caught($_g)->unwrap())??'null');
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 297,
				"className" => "asys.FileSystem",
				"methodName" => "deleteDirectory",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	public static function deleteFile ($path) {
		$v = null;
		try {
			\unlink($path);
			$v = Outcome::Success(Noise::Noise());
		} catch(\Throwable $_g) {
			NativeStackTrace::saveStack($_g);
			$v1 = "" . (\Std::string(Exception::caught($_g)->unwrap())??'null');
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 288,
				"className" => "asys.FileSystem",
				"methodName" => "deleteFile",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	public static function exists ($path) {
		\clearstatcache(true, $path);
		return new SyncFuture(new LazyConst(\file_exists($path)));
	}

	/**
	 * @param string $relPath
	 * 
	 * @return FutureObject
	 */
	public static function fullPath ($relPath) {
		$v = null;
		try {
			$v = Outcome::Success((\realpath($relPath) ?: null));
		} catch(\Throwable $_g) {
			NativeStackTrace::saveStack($_g);
			$v1 = "" . (\Std::string(Exception::caught($_g)->unwrap())??'null');
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 261,
				"className" => "asys.FileSystem",
				"methodName" => "fullPath",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	public static function isDirectory ($path) {
		$v = null;
		try {
			$v = SysFileSystem::isDirectory($path);
		} catch(\Throwable $_g) {
			NativeStackTrace::saveStack($_g);
			$v = false;
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	public static function readDirectory ($path) {
		$v = null;
		try {
			$v = Outcome::Success(SysFileSystem::readDirectory($path));
		} catch(\Throwable $_g) {
			NativeStackTrace::saveStack($_g);
			$v1 = "" . (\Std::string(Exception::caught($_g)->unwrap())??'null');
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 303,
				"className" => "asys.FileSystem",
				"methodName" => "readDirectory",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * @param string $newPath
	 * 
	 * @return FutureObject
	 */
	public static function rename ($path, $newPath) {
		$v = null;
		try {
			\rename($path, $newPath);
			$v = Outcome::Success(Noise::Noise());
		} catch(\Throwable $_g) {
			NativeStackTrace::saveStack($_g);
			$v1 = "" . (\Std::string(Exception::caught($_g)->unwrap())??'null');
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 249,
				"className" => "asys.FileSystem",
				"methodName" => "rename",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}

	/**
	 * @param string $path
	 * 
	 * @return FutureObject
	 */
	public static function stat ($path) {
		$v = null;
		try {
			$v = Outcome::Success(SysFileSystem::stat($path));
		} catch(\Throwable $_g) {
			NativeStackTrace::saveStack($_g);
			$v1 = "" . (\Std::string(Exception::caught($_g)->unwrap())??'null');
			$v = Outcome::Failure(new TypedError(null, $v1, new HxAnon([
				"fileName" => "asys/FileSystem.hx",
				"lineNumber" => 255,
				"className" => "asys.FileSystem",
				"methodName" => "stat",
			])));
		}
		return new SyncFuture(new LazyConst($v));
	}
}

Boot::registerClass(FileSystem::class, 'asys.FileSystem');
