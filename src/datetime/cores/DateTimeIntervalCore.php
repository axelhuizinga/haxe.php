<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace datetime\cores;

use \php\Boot;
use \datetime\utils\DateTimeMonthUtils;
use \datetime\_DateTime\DateTime_Impl_;

/**
 * Time interval representation.
 *   Stores difference in seconds between two DateTime instances.
 *   Amounts of years/months/days/hours/minutes/seconds are calculated accounting leap years.
 *   Maximum allowed interval is ~4100 years.
 */
class DateTimeIntervalCore {
	/**
	 * @var float
	 * DateTime instance of the beginning of this interval
	 */
	public $begin;
	/**
	 * @var int
	 * amount of days
	 */
	public $days;
	/**
	 * @var float
	 * DateTime instance of the end of this interval
	 */
	public $end;
	/**
	 * @var int
	 * amount of hours
	 */
	public $hours;
	/**
	 * @var int
	 * amount of minutes
	 */
	public $minutes;
	/**
	 * @var int
	 * amount of months
	 */
	public $months;
	/**
	 * @var bool
	 * Indicates if this is negative interval
	 */
	public $negative;
	/**
	 * @var int
	 * amount of seconds
	 */
	public $seconds;
	/**
	 * @var int
	 * amount of years
	 */
	public $years;

	/**
	 * Constructor.
	 * Manual instantiation is not allowed.
	 *
	 * 
	 * @return void
	 */
	public function __construct () {
		$this->seconds = -1;
		$this->minutes = -1;
		$this->hours = -1;
		$this->days = -1;
		$this->months = -1;
		$this->years = -1;
		$this->negative = false;
	}

	/**
	 * Get amount of full days in this interval (always less then 31)
	 *
	 * 
	 * @return int
	 */
	public function getDays () {
		if ($this->days < 0) {
			$this1 = $this->begin;
			$dayBegin = DateTimeMonthUtils::getMonthDay((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
			$this1 = $this->end;
			$dayEnd = DateTimeMonthUtils::getMonthDay((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
			$tmp = null;
			if ($dayBegin <= $dayEnd) {
				$tmp = $dayEnd - $dayBegin;
			} else {
				$this1 = $this->begin;
				$tmp = DateTimeMonthUtils::days(DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1)), DateTime_Impl_::isLeapYear($this->begin)) - $dayBegin + $dayEnd;
			}
			$this->days = $tmp;
			$this1 = $this->begin;
			$h1 = (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
			$this1 = $this->end;
			$h2 = (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
			if ($h2 < $h1) {
				$this->days--;
			} else if ($h2 === $h1) {
				$this1 = $this->begin;
				$m1 = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
				$this1 = $this->end;
				$m2 = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
				if ($m2 < $m1) {
					$this->days--;
				} else {
					$tmp = null;
					if ($m2 === $m1) {
						$this1 = $this->end;
						$tmp1 = (int)(($this1 - \floor($this1 / 60) * 60));
						$this1 = $this->begin;
						$tmp = $tmp1 < (int)(($this1 - \floor($this1 / 60) * 60));
					} else {
						$tmp = false;
					}
					if ($tmp) {
						$this->days--;
					}
				}
			}
		}
		return $this->days;
	}

	/**
	 * Get amount of full hours in this interval (always less then 24)
	 *
	 * 
	 * @return int
	 */
	public function getHours () {
		if ($this->hours < 0) {
			$this1 = $this->begin;
			$hourBegin = (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
			$this1 = $this->end;
			$hourEnd = (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
			$this->hours = ($hourBegin <= $hourEnd ? $hourEnd - $hourBegin : 24 - $hourBegin + $hourEnd);
			$this1 = $this->begin;
			$m1 = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
			$this1 = $this->end;
			$m2 = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
			if ($m2 < $m1) {
				$this->hours--;
			} else {
				$tmp = null;
				if ($m2 === $m1) {
					$this1 = $this->end;
					$tmp1 = (int)(($this1 - \floor($this1 / 60) * 60));
					$this1 = $this->begin;
					$tmp = $tmp1 < (int)(($this1 - \floor($this1 / 60) * 60));
				} else {
					$tmp = false;
				}
				if ($tmp) {
					$this->hours--;
				}
			}
		}
		return $this->hours;
	}

	/**
	 * Get amount of full minutes in this interval (always less then 60)
	 *
	 * 
	 * @return int
	 */
	public function getMinutes () {
		if ($this->minutes < 0) {
			$this1 = $this->begin;
			$minuteBegin = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
			$this1 = $this->end;
			$minuteEnd = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
			$this->minutes = ($minuteBegin <= $minuteEnd ? $minuteEnd - $minuteBegin : 60 - $minuteBegin + $minuteEnd);
			$this1 = $this->end;
			$tmp = (int)(($this1 - \floor($this1 / 60) * 60));
			$this1 = $this->begin;
			if ($tmp < (int)(($this1 - \floor($this1 / 60) * 60))) {
				$this->minutes--;
			}
		}
		return $this->minutes;
	}

	/**
	 * Get amount of full months in this interval (always less then 12)
	 *
	 * 
	 * @return int
	 */
	public function getMonths () {
		if ($this->months < 0) {
			$this1 = $this->begin;
			$monthBegin = DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
			$this1 = $this->end;
			$monthEnd = DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
			$this->months = ($monthBegin <= $monthEnd ? $monthEnd - $monthBegin : 12 - $monthBegin + $monthEnd);
			$this1 = $this->begin;
			$d1 = DateTimeMonthUtils::getMonthDay((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
			$this1 = $this->end;
			$d2 = DateTimeMonthUtils::getMonthDay((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
			if ($d2 < $d1) {
				$this->months--;
			} else if ($d1 === $d2) {
				$this1 = $this->begin;
				$h1 = (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
				$this1 = $this->end;
				$h2 = (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
				if ($h2 < $h1) {
					$this->months--;
				} else if ($h2 === $h1) {
					$this1 = $this->begin;
					$m1 = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
					$this1 = $this->end;
					$m2 = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
					if ($m2 < $m1) {
						$this->months--;
					} else {
						$tmp = null;
						if ($m2 === $m1) {
							$this1 = $this->end;
							$tmp1 = (int)(($this1 - \floor($this1 / 60) * 60));
							$this1 = $this->begin;
							$tmp = $tmp1 < (int)(($this1 - \floor($this1 / 60) * 60));
						} else {
							$tmp = false;
						}
						if ($tmp) {
							$this->months--;
						}
					}
				}
			}
		}
		return $this->months;
	}

	/**
	 * Get amount of full seconds in this interval (always less then 60)
	 *
	 * 
	 * @return int
	 */
	public function getSeconds () {
		if ($this->seconds < 0) {
			$this1 = $this->begin;
			$secondBegin = (int)(($this1 - \floor($this1 / 60) * 60));
			$this1 = $this->end;
			$secondEnd = (int)(($this1 - \floor($this1 / 60) * 60));
			$this->seconds = ($secondBegin <= $secondEnd ? $secondEnd - $secondBegin : 60 - $secondBegin + $secondEnd);
		}
		return $this->seconds;
	}

	/**
	 * Get total amount of days in this interval.
	 *
	 * 
	 * @return int
	 */
	public function getTotalDays () {
		return (int)((($this->end - 62135596800.0 - ($this->begin - 62135596800.0)) / 86400));
	}

	/**
	 * Get total amount of hours in this interval.
	 *
	 * 
	 * @return int
	 */
	public function getTotalHours () {
		return (int)((($this->end - 62135596800.0 - ($this->begin - 62135596800.0)) / 3600));
	}

	/**
	 * Get total amount of minutes in this interval.
	 *
	 * 
	 * @return int
	 */
	public function getTotalMinutes () {
		return (int)((($this->end - 62135596800.0 - ($this->begin - 62135596800.0)) / 60));
	}

	/**
	 * Get total amount of months in this interval.
	 *   E.g. DateTimeInterval.fromString('(3y,5m)').getTotalMonths() returns 3 * 12 + 5 = 41
	 *
	 * 
	 * @return int
	 */
	public function getTotalMonths () {
		return $this->getYears() * 12 + $this->getMonths();
	}

	/**
	 * Get total amount of seconds in this interval.
	 *
	 * 
	 * @return float
	 */
	public function getTotalSeconds () {
		return $this->end - 62135596800.0 - ($this->begin - 62135596800.0);
	}

	/**
	 * Get total amount of weeks in this interval.
	 *   Not calendar weeks, but each 7 days.
	 * 
	 * @return int
	 */
	public function getTotalWeeks () {
		return (int)((($this->end - 62135596800.0 - ($this->begin - 62135596800.0)) / 604800));
	}

	/**
	 * Get amount of full years in this interval.
	 *
	 * 
	 * @return int
	 */
	public function getYears () {
		if ($this->years < 0) {
			$this->years = DateTime_Impl_::getYear($this->end) - DateTime_Impl_::getYear($this->begin);
			$this1 = $this->begin;
			$m1 = DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
			$this1 = $this->end;
			$m2 = DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
			if ($m2 < $m1) {
				$this->years--;
			} else if ($m1 === $m2) {
				$this1 = $this->begin;
				$d1 = DateTimeMonthUtils::getMonthDay((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
				$this1 = $this->end;
				$d2 = DateTimeMonthUtils::getMonthDay((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
				if ($d2 < $d1) {
					$this->years--;
				} else if ($d1 === $d2) {
					$this1 = $this->begin;
					$h1 = (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
					$this1 = $this->end;
					$h2 = (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
					if ($h2 < $h1) {
						$this->years--;
					} else if ($h2 === $h1) {
						$this1 = $this->begin;
						$m1 = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
						$this1 = $this->end;
						$m2 = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
						if ($m2 < $m1) {
							$this->years--;
						} else {
							$tmp = null;
							if ($m2 === $m1) {
								$this1 = $this->end;
								$tmp1 = (int)(($this1 - \floor($this1 / 60) * 60));
								$this1 = $this->begin;
								$tmp = $tmp1 < (int)(($this1 - \floor($this1 / 60) * 60));
							} else {
								$tmp = false;
							}
							if ($tmp) {
								$this->years--;
							}
						}
					}
				}
			}
		}
		return $this->years;
	}
}

Boot::registerClass(DateTimeIntervalCore::class, 'datetime.cores.DateTimeIntervalCore');
