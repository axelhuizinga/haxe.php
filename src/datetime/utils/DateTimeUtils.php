<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace datetime\utils;

use \php\Boot;
use \haxe\Exception;
use \datetime\_DateTime\DateTime_Impl_;
use \php\_Boot\HxString;
use \datetime\DTSnap;
use \datetime\DTPeriod;

/**
 * Utility functions for DateTime
 *
 */
class DateTimeUtils {
	/**
	 * Add specified amount of months to `dt`
	 *
	 * 
	 * @param float $dt
	 * @param int $amount
	 * 
	 * @return float
	 */
	public static function addMonth ($dt, $amount) {
		$month = DateTimeMonthUtils::getMonth((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt)) + $amount;
		if ($month > 12) {
			$years = (int)(($month / 12));
			$dt = DateTimeUtils::addYear($dt, $years) + 62135596800.0;
			$month -= $years * 12;
		} else if ($month <= 0) {
			$years = (int)(($month / 12)) - 1;
			$dt = DateTimeUtils::addYear($dt, $years) + 62135596800.0;
			$month -= $years * 12;
		}
		$isLeap = DateTime_Impl_::isLeapYear($dt);
		$value = DateTimeMonthUtils::getMonthDay((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt));
		$max = DateTimeMonthUtils::days($month, $isLeap);
		return DateTime_Impl_::yearStart($dt) + DateTimeMonthUtils::toSeconds($month, $isLeap) + ((($value < 1 ? 1 : ($value > $max ? $max : $value))) - 1) * 86400 + (int)((($dt - \floor($dt / 86400) * 86400) / 3600)) * 3600 + (int)((($dt - \floor($dt / 3600) * 3600) / 60)) * 60 + (int)(($dt - \floor($dt / 60) * 60));
	}

	/**
	 * Add specified amount of years to `dt`.
	 * Returns unix timestamp.
	 * 
	 * @param float $dt
	 * @param int $amount
	 * 
	 * @return float
	 */
	public static function addYear ($dt, $amount) {
		$year = DateTime_Impl_::getYear($dt) + $amount;
		$time = $dt - 62135596800.0 - (DateTime_Impl_::yearStart($dt) + DateTimeMonthUtils::toSeconds(DateTimeMonthUtils::getMonth((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt)), DateTime_Impl_::isLeapYear($dt)));
		return DateTimeUtils::yearToStamp($year) + DateTimeMonthUtils::toSeconds(DateTimeMonthUtils::getMonth((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt)), (($year % 4) === 0) && ((($year % 100) === 0 ? ($year % 400) === 0 : true))) + $time - 62135596800.0;
	}

	/**
	 * Make sure `value` is not less than `min` and not greater than `max`
	 *
	 * 
	 * @param mixed $value
	 * @param mixed $min
	 * @param mixed $max
	 * 
	 * @return mixed
	 */
	public static function clamp ($value, $min, $max) {
		if ($value < $min) {
			return $min;
		} else if ($value > $max) {
			return $max;
		} else {
			return $value;
		}
	}

	/**
	 * Parse iso string into DateTime
	 *
	 * 
	 * @param string $str
	 * 
	 * @return float
	 */
	public static function fromIsoString ($str) {
		if (\StringTools::fastCodeAt($str, mb_strlen($str) - 1) !== 90) {
			throw Exception::thrown("`" . ($str??'null') . "` - incorrect date/time format. Not an ISO 8601 UTC/Zulu string: Z not found.");
		}
		if (mb_strlen($str) > 20) {
			if (\StringTools::fastCodeAt($str, 19) !== 46) {
				throw Exception::thrown("`" . ($str??'null') . "` - incorrect date/time format. Not an ISO 8601 string: Millisecond specification erroneous.");
			}
			if (\StringTools::fastCodeAt($str, 23) !== 90) {
				throw Exception::thrown("`" . ($str??'null') . "` - incorrect date/time format. Not an ISO 8601 string: Timezone specification erroneous.");
			}
		}
		return DateTimeUtils::parse((\mb_substr($str, 0, 10)??'null') . " " . (\mb_substr($str, 11, 8)??'null'));
	}

	/**
	 * Parse string into DateTime
	 *
	 * 
	 * @param string $str
	 * 
	 * @return float
	 */
	public static function fromString ($str) {
		if ((mb_strlen($str) === 10) || (\StringTools::fastCodeAt($str, 10) === 32)) {
			return DateTimeUtils::parse($str);
		} else if (\StringTools::fastCodeAt($str, 10) === 84) {
			return DateTimeUtils::fromIsoString($str);
		} else {
			throw Exception::thrown("`" . ($str??'null') . "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD` or `YYYY-MM-DDThh:mm:ss[.SSS]Z`");
		}
	}

	/**
	 * Get unix timestamp of a specified `weekDay` in this month, which is the `num`st in current month.
	 *
	 * 
	 * @param float $dt
	 * @param int $weekDay
	 * @param int $num
	 * 
	 * @return float
	 */
	public static function getWeekDayNum ($dt, $weekDay, $num) {
		$month = DateTimeMonthUtils::getMonth((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt));
		if ($num > 0) {
			return DateTime_Impl_::add(DateTime_Impl_::snap(DateTime_Impl_::monthStart($dt, $month) - 1 + 62135596800.0, DTSnap::Week(1, $weekDay)), DTPeriod::Week($num - 1)) - 62135596800.0;
		} else if ($num < 0) {
			return DateTime_Impl_::add(DateTime_Impl_::snap(DateTime_Impl_::monthStart($dt, $month + 1) - 1 + 62135596800.0, DTSnap::Week(-1, $weekDay)), DTPeriod::Week($num + 1)) - 62135596800.0;
		} else {
			return $dt - 62135596800.0;
		}
	}

	/**
	 * Parse string to DateTime
	 *
	 * 
	 * @param string $str
	 * 
	 * @return float
	 */
	public static function parse ($str) {
		$ylength = HxString::indexOf($str, "-");
		if (($ylength < 1) || (((mb_strlen($str) - $ylength) !== 6) && ((mb_strlen($str) - $ylength) !== 15))) {
			throw Exception::thrown("`" . ($str??'null') . "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD`");
		}
		if ((mb_strlen($str) - $ylength) === 6) {
			$str = ($str??'null') . " 00:00:00";
		}
		$year = \Std::parseInt(\mb_substr($str, 0, $ylength));
		$month = \Std::parseInt(\mb_substr($str, $ylength + 1, 2));
		$day = \Std::parseInt(\mb_substr($str, $ylength + 4, 2));
		$hour = \Std::parseInt(\mb_substr($str, $ylength + 7, 2));
		$minute = \Std::parseInt(\mb_substr($str, $ylength + 10, 2));
		$second = \Std::parseInt(\mb_substr($str, $ylength + 13, 2));
		if (($year === null) || ($month === null) || ($day === null) || ($hour === null) || ($minute === null) || ($second === null)) {
			throw Exception::thrown("`" . ($str??'null') . "` - incorrect date/time format. Should be either `YYYY-MM-DD hh:mm:ss` or `YYYY-MM-DD`");
		}
		$year1 = $year;
		$month1 = $month;
		$day1 = $day;
		$hour1 = $hour;
		$minute1 = $minute;
		$second1 = $second;
		if ($second === null) {
			$second1 = 0;
		}
		if ($minute === null) {
			$minute1 = 0;
		}
		if ($hour === null) {
			$hour1 = 0;
		}
		if ($day === null) {
			$day1 = 1;
		}
		if ($month === null) {
			$month1 = 1;
		}
		if ($year === null) {
			$year1 = 1970;
		}
		return DateTimeUtils::yearToStamp($year1) + DateTimeMonthUtils::toSeconds($month1, (($year1 % 4) === 0) && ((($year1 % 100) === 0 ? ($year1 % 400) === 0 : true))) + ($day1 - 1) * 86400 + $hour1 * 3600 + $minute1 * 60 + $second1 - 62135596800.0 + 62135596800.0;
	}

	/**
	 * Limited strftime implementation
	 *
	 * 
	 * @param float $dt
	 * @param string $format
	 * 
	 * @return string
	 */
	public static function strftime ($dt, $format) {
		$prevPos = 0;
		$pos = HxString::indexOf($format, "%");
		$str = "";
		while ($pos >= 0) {
			$str = ($str??'null') . (HxString::substring($format, $prevPos, $pos)??'null');
			++$pos;
			$__hx__switch = (\StringTools::fastCodeAt($format, $pos));
			if ($__hx__switch === 37) {
				$str = ($str??'null') . "%";
			} else if ($__hx__switch === 67) {
				$str = ($str??'null') . (\StringTools::lpad(((int)((DateTime_Impl_::getYear($dt) / 100))??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 68) {
				$str = ($str??'null') . (\StringTools::lpad((DateTimeMonthUtils::getMonth((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt))??'null') . "/", "0", 3)??'null') . (\StringTools::lpad((DateTimeMonthUtils::getMonthDay((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt))??'null') . "/", "0", 3)??'null') . (\StringTools::lpad(\mb_substr((DateTime_Impl_::getYear($dt)??'null') . "", -2, null), "0", 2)??'null');
			} else if ($__hx__switch === 70) {
				$str = ($str??'null') . (DateTime_Impl_::getYear($dt)??'null') . "-" . (\StringTools::lpad((DateTimeMonthUtils::getMonth((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt))??'null') . "-", "0", 3)??'null') . (\StringTools::lpad((DateTimeMonthUtils::getMonthDay((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt))??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 72) {
				$str = ($str??'null') . (\StringTools::lpad(((int)((($dt - \floor($dt / 86400) * 86400) / 3600))??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 73) {
				$str = ($str??'null') . (\StringTools::lpad((DateTime_Impl_::getHour12($dt)??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 77) {
				$str = ($str??'null') . (\StringTools::lpad(((int)((($dt - \floor($dt / 3600) * 3600) / 60))??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 80) {
				$str = ($str??'null') . (((int)((($dt - \floor($dt / 86400) * 86400) / 3600)) < 12 ? "am" : "pm")??'null');
			} else if ($__hx__switch === 82) {
				$str = ($str??'null') . (\StringTools::lpad(((int)((($dt - \floor($dt / 86400) * 86400) / 3600))??'null') . ":", "0", 3)??'null') . (\StringTools::lpad(((int)((($dt - \floor($dt / 3600) * 3600) / 60))??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 83) {
				$str = ($str??'null') . (\StringTools::lpad(((int)(($dt - \floor($dt / 60) * 60))??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 84) {
				$str = ($str??'null') . (\StringTools::lpad(((int)((($dt - \floor($dt / 86400) * 86400) / 3600))??'null') . ":", "0", 3)??'null') . (\StringTools::lpad(((int)((($dt - \floor($dt / 3600) * 3600) / 60))??'null') . ":", "0", 3)??'null') . (\StringTools::lpad(((int)(($dt - \floor($dt / 60) * 60))??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 86) {
				$str = ($str??'null') . (\StringTools::lpad((DateTime_Impl_::getWeek($dt)??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 89) {
				$str = ($str??'null') . (DateTime_Impl_::getYear($dt)??'null') . "";
			} else if ($__hx__switch === 100) {
				$str = ($str??'null') . (\StringTools::lpad((DateTimeMonthUtils::getMonthDay((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt))??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 101) {
				$str = ($str??'null') . (\StringTools::lpad((DateTimeMonthUtils::getMonthDay((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt))??'null') . "", " ", 2)??'null');
			} else if ($__hx__switch === 106) {
				$str = ($str??'null') . (\StringTools::lpad("" . ((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1), "0", 3)??'null');
			} else if ($__hx__switch === 107) {
				$str = ($str??'null') . (\StringTools::lpad(((int)((($dt - \floor($dt / 86400) * 86400) / 3600))??'null') . "", " ", 2)??'null');
			} else if ($__hx__switch === 108) {
				$str = ($str??'null') . (\StringTools::lpad((DateTime_Impl_::getHour12($dt)??'null') . "", " ", 2)??'null');
			} else if ($__hx__switch === 109) {
				$str = ($str??'null') . (\StringTools::lpad((DateTimeMonthUtils::getMonth((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt))??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 112) {
				$str = ($str??'null') . (((int)((($dt - \floor($dt / 86400) * 86400) / 3600)) < 12 ? "AM" : "PM")??'null');
			} else if ($__hx__switch === 114) {
				$str = ($str??'null') . (\StringTools::lpad((DateTime_Impl_::getHour12($dt)??'null') . ":", "0", 3)??'null') . (\StringTools::lpad(((int)((($dt - \floor($dt / 3600) * 3600) / 60))??'null') . ":", "0", 3)??'null') . (\StringTools::lpad(((int)(($dt - \floor($dt / 60) * 60))??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 115) {
				$str = ($str??'null') . ($dt - 62135596800.0) . "";
			} else if ($__hx__switch === 117) {
				$str = ($str??'null') . (DateTime_Impl_::getWeekDay($dt, true)??'null') . "";
			} else if ($__hx__switch === 119) {
				$str = ($str??'null') . (DateTime_Impl_::getWeekDay($dt)??'null') . "";
			} else if ($__hx__switch === 121) {
				$str = ($str??'null') . (\StringTools::lpad(\mb_substr((DateTime_Impl_::getYear($dt)??'null') . "", -2, null), "0", 2)??'null');
			}
			$prevPos = $pos + 1;
			$pos = HxString::indexOf($format, "%", $pos + 1);
		}
		$str = ($str??'null') . (HxString::substring($format, $prevPos)??'null');
		return $str;
	}

	/**
	 * Convert year number (4 digits) to DateTime-timestamp (seconds since 1 a.d.)
	 *
	 * 
	 * @param int $year
	 * 
	 * @return float
	 */
	public static function yearToStamp ($year) {
		--$year;
		$cquads = (int)(($year / 400));
		$quads = (int)((($year - $cquads * 400) / 4));
		return $cquads * 12622780800.0 + $quads * 126230400.0 - (int)(($quads / 25)) * 86400 + ($year - $cquads * 400 - $quads * 4) * 31536000;
	}

	/**
	 * Instantiating is not allowed
	 *
	 * 
	 * @return void
	 */
	public function __construct () {
	}
}

Boot::registerClass(DateTimeUtils::class, 'datetime.utils.DateTimeUtils');
