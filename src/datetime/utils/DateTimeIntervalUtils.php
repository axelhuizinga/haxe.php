<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace datetime\utils;

use \php\Boot;
use \datetime\cores\DateTimeIntervalCore;
use \php\_Boot\HxString;

/**
 * Utility functions for DateTimeInterval
 *
 */
class DateTimeIntervalUtils {
	/**
	 * Format each string in `format` but only fill one placeholder in each string.
	 *
	 * 
	 * @param DateTimeIntervalCore $dti
	 * @param \Array_hx $format
	 * 
	 * @return \Array_hx
	 */
	public static function formatPartial ($dti, $format) {
		$result = new \Array_hx();
		$pos = 0;
		$str = "";
		$_g = 0;
		$_g1 = $format->length;
		while ($_g < $_g1) {
			$f = $_g++;
			$pos = HxString::indexOf(($format->arr[$f] ?? null), "%");
			if ($pos >= 0) {
				$__hx__switch = (\StringTools::fastCodeAt(($format->arr[$f] ?? null), $pos + 1));
				if ($__hx__switch === 68) {
					if ($dti->getDays() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . (\StringTools::lpad(($dti->getDays()??'null') . "", "0", 2)??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 72) {
					if ($dti->getHours() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . (\StringTools::lpad(($dti->getHours()??'null') . "", "0", 2)??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 73) {
					if ($dti->getMinutes() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . (\StringTools::lpad(($dti->getMinutes()??'null') . "", "0", 2)??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 77) {
					if ($dti->getMonths() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . (\StringTools::lpad(($dti->getMonths()??'null') . "", "0", 2)??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 83) {
					if ($dti->getSeconds() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . (\StringTools::lpad(($dti->getSeconds()??'null') . "", "0", 2)??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 89) {
					if ($dti->getYears() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . (\StringTools::lpad(($dti->getYears()??'null') . "", "0", 2)??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 97) {
					if ($dti->getTotalDays() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getTotalDays()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 98) {
					if ($dti->getTotalMonths() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getTotalMonths()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 99) {
					if ($dti->getTotalHours() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getTotalHours()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 100) {
					if ($dti->getDays() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getDays()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 101) {
					if ($dti->getTotalMinutes() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getTotalMinutes()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 102) {
					if (Boot::equal($dti->getTotalSeconds(), 0)) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getTotalSeconds()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 104) {
					if ($dti->getHours() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getHours()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 105) {
					if ($dti->getMinutes() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getMinutes()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 109) {
					if ($dti->getMonths() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getMonths()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 115) {
					if ($dti->getSeconds() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getSeconds()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else if ($__hx__switch === 121) {
					if ($dti->getYears() === 0) {
						continue;
					}
					$str = (HxString::substring(($format->arr[$f] ?? null), 0, $pos)??'null') . ($dti->getYears()??'null') . (HxString::substring(($format->arr[$f] ?? null), $pos + 2)??'null');
				} else {
					continue;
				}
				$result->arr[$result->length++] = $str;
			}
		}
		return $result;
	}

	/**
	 * Limited strftime implementation
	 *
	 * 
	 * @param DateTimeIntervalCore $dti
	 * @param string $format
	 * 
	 * @return string
	 */
	public static function strftime ($dti, $format) {
		$prevPos = 0;
		$pos = HxString::indexOf($format, "%");
		$str = "";
		while ($pos >= 0) {
			$str = ($str??'null') . (HxString::substring($format, $prevPos, $pos)??'null');
			++$pos;
			$__hx__switch = (\StringTools::fastCodeAt($format, $pos));
			if ($__hx__switch === 37) {
				$str = ($str??'null') . "%";
			} else if ($__hx__switch === 68) {
				$str = ($str??'null') . (\StringTools::lpad(($dti->getDays()??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 72) {
				$str = ($str??'null') . (\StringTools::lpad(($dti->getHours()??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 73) {
				$str = ($str??'null') . (\StringTools::lpad(($dti->getMinutes()??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 77) {
				$str = ($str??'null') . (\StringTools::lpad(($dti->getMonths()??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 82) {
				$str = ($str??'null') . (($dti->negative ? "-" : "+")??'null');
			} else if ($__hx__switch === 83) {
				$str = ($str??'null') . (\StringTools::lpad(($dti->getSeconds()??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 89) {
				$str = ($str??'null') . (\StringTools::lpad(($dti->getYears()??'null') . "", "0", 2)??'null');
			} else if ($__hx__switch === 97) {
				$str = ($str??'null') . ($dti->getTotalDays()??'null') . "";
			} else if ($__hx__switch === 98) {
				$str = ($str??'null') . ($dti->getTotalMonths()??'null') . "";
			} else if ($__hx__switch === 99) {
				$str = ($str??'null') . ($dti->getTotalHours()??'null') . "";
			} else if ($__hx__switch === 100) {
				$str = ($str??'null') . ($dti->getDays()??'null') . "";
			} else if ($__hx__switch === 101) {
				$str = ($str??'null') . ($dti->getTotalMinutes()??'null') . "";
			} else if ($__hx__switch === 102) {
				$str = ($str??'null') . ($dti->getTotalSeconds()??'null') . "";
			} else if ($__hx__switch === 104) {
				$str = ($str??'null') . ($dti->getHours()??'null') . "";
			} else if ($__hx__switch === 105) {
				$str = ($str??'null') . ($dti->getMinutes()??'null') . "";
			} else if ($__hx__switch === 109) {
				$str = ($str??'null') . ($dti->getMonths()??'null') . "";
			} else if ($__hx__switch === 114) {
				$str = ($str??'null') . (($dti->negative ? "-" : "")??'null');
			} else if ($__hx__switch === 115) {
				$str = ($str??'null') . ($dti->getSeconds()??'null') . "";
			} else if ($__hx__switch === 121) {
				$str = ($str??'null') . ($dti->getYears()??'null') . "";
			}
			$prevPos = $pos + 1;
			$pos = HxString::indexOf($format, "%", $pos + 1);
		}
		$str = ($str??'null') . (HxString::substring($format, $prevPos)??'null');
		return $str;
	}

	/**
	 * Instantiating is not allowed
	 *
	 * 
	 * @return void
	 */
	public function __construct () {
	}
}

Boot::registerClass(DateTimeIntervalUtils::class, 'datetime.utils.DateTimeIntervalUtils');
