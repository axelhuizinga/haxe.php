<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace datetime\utils;

use \php\Boot;
use \datetime\_DateTime\DateTime_Impl_;

/**
 * Snap implementations
 *
 */
class DateTimeSnapUtils {
	/**
	 * Snap to nearest day
	 * Returns unix timestamp
	 * 
	 * @param float $dt
	 * @param int $direction
	 * 
	 * @return float
	 */
	public static function snapDay ($dt, $direction) {
		$days = ($dt - 62135596800.0) / 86400;
		if ($direction === -1) {
			return \floor($days) * 86400;
		} else if ($direction === 0) {
			return \floor($days + 0.5) * 86400;
		} else if ($direction === 1) {
			return \ceil($days) * 86400;
		}
	}

	/**
	 * Snap to nearest hour
	 * Returns unix timestamp
	 * 
	 * @param float $dt
	 * @param int $direction
	 * 
	 * @return float
	 */
	public static function snapHour ($dt, $direction) {
		$hours = ($dt - 62135596800.0) / 3600;
		if ($direction === -1) {
			return \floor($hours) * 3600;
		} else if ($direction === 0) {
			return \floor($hours + 0.5) * 3600;
		} else if ($direction === 1) {
			return \ceil($hours) * 3600;
		}
	}

	/**
	 * Snap to nearest minute
	 * Returns unix timestamp
	 * 
	 * @param float $dt
	 * @param int $direction
	 * 
	 * @return float
	 */
	public static function snapMinute ($dt, $direction) {
		$minutes = ($dt - 62135596800.0) / 60;
		if ($direction === -1) {
			return \floor($minutes) * 60;
		} else if ($direction === 0) {
			return \floor($minutes + 0.5) * 60;
		} else if ($direction === 1) {
			return \ceil($minutes) * 60;
		}
	}

	/**
	 * Snap to nearest month
	 * Returns unix timestamp
	 * 
	 * @param float $dt
	 * @param int $direction
	 * 
	 * @return float
	 */
	public static function snapMonth ($dt, $direction) {
		$month = DateTimeMonthUtils::getMonth((int)((($dt - 62135596800.0 - DateTime_Impl_::yearStart($dt)) / 86400)) + 1, DateTime_Impl_::isLeapYear($dt));
		$isLeap = DateTime_Impl_::isLeapYear($dt);
		if ($direction === -1) {
			return DateTime_Impl_::yearStart($dt) + DateTimeMonthUtils::toSeconds($month, $isLeap);
		} else if ($direction === 0) {
			$previous = DateTime_Impl_::yearStart($dt) + DateTimeMonthUtils::toSeconds($month, $isLeap);
			$next = DateTime_Impl_::yearStart($dt) + DateTimeMonthUtils::toSeconds($month, $isLeap) + DateTimeMonthUtils::days($month, $isLeap) * 86400;
			if (($next - ($dt - 62135596800.0)) > ($dt - 62135596800.0 - $previous)) {
				return $previous;
			} else {
				return $next;
			}
		} else if ($direction === 1) {
			return DateTime_Impl_::yearStart($dt) + DateTimeMonthUtils::toSeconds($month, $isLeap) + DateTimeMonthUtils::days($month, $isLeap) * 86400;
		}
	}

	/**
	 * Snap to nearest `required` week day
	 * Returns unix timestamp
	 * 
	 * @param float $dt
	 * @param int $direction
	 * @param int $required
	 * 
	 * @return float
	 */
	public static function snapWeek ($dt, $direction, $required) {
		$current = DateTime_Impl_::getWeekDay($dt);
		$days = \floor(($dt - 62135596800.0) / 86400);
		if ($direction === -1) {
			return ($days - (($current >= $required ? $current - $required : $current + 7 - $required))) * 86400;
		} else if ($direction === 0) {
			$previous = ($days - (($current >= $required ? $current - $required : $current + 7 - $required))) * 86400;
			$next = ($days + (($required > $current ? $required - $current : $required + 7 - $current))) * 86400;
			if (($next - ($dt - 62135596800.0)) > ($dt - 62135596800.0 - $previous)) {
				return $previous;
			} else {
				return $next;
			}
		} else if ($direction === 1) {
			return ($days + (($required > $current ? $required - $current : $required + 7 - $current))) * 86400;
		}
	}

	/**
	 * Snap to nearest year.
	 * Returns unix timestamp.
	 * 
	 * @param float $dt
	 * @param int $direction
	 * 
	 * @return float
	 */
	public static function snapYear ($dt, $direction) {
		if ($direction === -1) {
			return DateTime_Impl_::yearStart($dt);
		} else if ($direction === 0) {
			$next = DateTime_Impl_::yearStart(DateTimeUtils::addYear($dt, 1) + 62135596800.0);
			$previous = DateTime_Impl_::yearStart($dt);
			if (($next - ($dt - 62135596800.0)) > ($dt - 62135596800.0 - $previous)) {
				return $previous;
			} else {
				return $next;
			}
		} else if ($direction === 1) {
			return DateTime_Impl_::yearStart(DateTimeUtils::addYear($dt, 1) + 62135596800.0);
		}
	}

	/**
	 * Instantiating is not allowed
	 *
	 * 
	 * @return void
	 */
	public function __construct () {
	}
}

Boot::registerClass(DateTimeSnapUtils::class, 'datetime.utils.DateTimeSnapUtils');
