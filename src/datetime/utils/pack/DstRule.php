<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace datetime\utils\pack;

use \php\Boot;
use \datetime\utils\DateTimeMonthUtils;
use \datetime\utils\DateTimeUtils;
use \datetime\_DateTime\DateTime_Impl_;
use \datetime\DTSnap;
use \datetime\DTPeriod;

/**
 * Period of strict Daylight Saving Time switching rules
 *
 */
class DstRule implements IPeriod {
	/**
	 * @var float
	 */
	public $_lastRequestedUtc;
	/**
	 * @var bool
	 */
	public $_noRequestsYet;
	/**
	 * @var TZPeriod
	 * For internal usage.
	 * If user request TZPeriod instance for the same utc several times in a row,
	 * we will not calculate period data for every request, but instead return this cached instance
	 */
	public $_period;
	/**
	 * @var string
	 * Timezone abbreviation for non-DST phase
	 */
	public $abr;
	/**
	 * @var string
	 * Timezone abbreviation for DST phase
	 */
	public $abrDst;
	/**
	 * @var int
	 * Month in wich time is switching from DST
	 */
	public $monthFromDst;
	/**
	 * @var int
	 * Month in wich time is switching to DST
	 */
	public $monthToDst;
	/**
	 * @var int
	 * Time offset during non-DST phase
	 */
	public $offset;
	/**
	 * @var int
	 * Time offset during DST phase
	 */
	public $offsetDst;
	/**
	 * @var int
	 * Local hour,minute,second to switch from DST (in seconds)
	 */
	public $timeFromDst;
	/**
	 * @var int
	 * Local hour,minute,second to switch to DST (in seconds)
	 */
	public $timeToDst;
	/**
	 * @var float
	 * utc time of the first second of this period
	 */
	public $utc;
	/**
	 * @var int
	 * day of week to switch to non-DST (in local time)
	 */
	public $wdayFromDst;
	/**
	 * @var int
	 * Which one of specified days in month is required to switch to DST.
	 * E.g. second Sunday. -1 for last one in this month.
	 */
	public $wdayNumFromDst;
	/**
	 * @var int
	 * Which one of specified days in month is required to switch to DST.
	 * E.g. second Sunday. -1 for last one in this month.
	 */
	public $wdayNumToDst;
	/**
	 * @var int
	 * day of week to switch to DST (in local time)
	 */
	public $wdayToDst;

	/**
	 * Constructor
	 *
	 * 
	 * @return void
	 */
	public function __construct () {
		$this->_noRequestsYet = true;
	}

	/**
	 * Description
	 *
	 * 
	 * @param bool $isDst
	 * 
	 * @return void
	 */
	public function _setPeriodData ($isDst) {
		if ($isDst) {
			$this->_period->isDst = true;
			$this->_period->abr = $this->abrDst;
			$this->_period->offset = $this->offsetDst;
		} else {
			$this->_period->isDst = false;
			$this->_period->abr = $this->abr;
			$this->_period->offset = $this->offset;
		}
	}

	/**
	 * Find estimated utc time of next switch to/from DST after specified `utc` time
	 *
	 * 
	 * @param float $utc
	 * 
	 * @return float
	 */
	public function estimatedSwitch ($utc) {
		if (($utc - 62135596800.0) < ($this->utc - 62135596800.0)) {
			return $this->utc;
		}
		$this1 = DateTime_Impl_::add($utc, DTPeriod::Second($this->offset));
		$month = DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
		$this1 = DateTime_Impl_::add($utc, DTPeriod::Second($this->offsetDst));
		$monthDst = DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
		if ($this->monthToDst > $this->monthFromDst) {
			if (($month < $this->monthFromDst) || ($monthDst > $this->monthToDst)) {
				$this1 = DateTime_Impl_::monthStart(DateTime_Impl_::snap(DateTime_Impl_::add($utc, DTPeriod::Second($this->offset)), DTSnap::Year(0)), $this->monthFromDst) + 62135596800.0;
				$num = $this->wdayNumFromDst;
				if ($num === null) {
					$num = 1;
				}
				return DateTime_Impl_::sub(DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayFromDst, $num) + 62135596800.0, DTPeriod::Second($this->timeFromDst)), DTPeriod::Second($this->offset));
			} else if (($month > $this->monthFromDst) && ($monthDst < $this->monthToDst)) {
				$this1 = DateTime_Impl_::monthStart(DateTime_Impl_::add($utc, DTPeriod::Second($this->offsetDst)), $this->monthToDst) + 62135596800.0;
				$num = $this->wdayNumToDst;
				if ($num === null) {
					$num = 1;
				}
				return DateTime_Impl_::sub(DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayToDst, $num) + 62135596800.0, DTPeriod::Second($this->timeToDst)), DTPeriod::Second($this->offsetDst));
			} else if (($month === $this->monthFromDst) || ($monthDst === $this->monthFromDst)) {
				$local = DateTime_Impl_::add($utc, DTPeriod::Second($this->offset));
				$this1 = DateTime_Impl_::monthStart($local, $this->monthFromDst) + 62135596800.0;
				$num = $this->wdayNumFromDst;
				if ($num === null) {
					$num = 1;
				}
				$switchLocal = DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayFromDst, $num) + 62135596800.0, DTPeriod::Second($this->timeFromDst));
				if (($local - 62135596800.0) < ($switchLocal - 62135596800.0)) {
					return DateTime_Impl_::sub($switchLocal, DTPeriod::Second($this->offset));
				} else {
					$local = DateTime_Impl_::add($utc, DTPeriod::Second($this->offsetDst));
					$this1 = DateTime_Impl_::monthStart($local, $this->monthToDst) + 62135596800.0;
					$num = $this->wdayNumToDst;
					if ($num === null) {
						$num = 1;
					}
					$switchLocal = DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayToDst, $num) + 62135596800.0, DTPeriod::Second($this->timeToDst));
					return DateTime_Impl_::sub($switchLocal, DTPeriod::Second($this->offsetDst));
				}
			} else {
				$local = DateTime_Impl_::add($utc, DTPeriod::Second($this->offsetDst));
				$this1 = DateTime_Impl_::monthStart($local, $this->monthToDst) + 62135596800.0;
				$num = $this->wdayNumToDst;
				if ($num === null) {
					$num = 1;
				}
				$switchLocal = DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayToDst, $num) + 62135596800.0, DTPeriod::Second($this->timeToDst));
				if (($local - 62135596800.0) < ($switchLocal - 62135596800.0)) {
					return DateTime_Impl_::sub($switchLocal, DTPeriod::Second($this->offsetDst));
				} else {
					$local = DateTime_Impl_::snap(DateTime_Impl_::add($utc, DTPeriod::Second($this->offset)), DTSnap::Year(1));
					$this1 = DateTime_Impl_::monthStart($local, $this->monthFromDst) + 62135596800.0;
					$num = $this->wdayNumFromDst;
					if ($num === null) {
						$num = 1;
					}
					$switchLocal = DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayFromDst, $num) + 62135596800.0, DTPeriod::Second($this->timeFromDst));
					return DateTime_Impl_::sub($switchLocal, DTPeriod::Second($this->offset));
				}
			}
		} else if (($month < $this->monthToDst) || ($monthDst > $this->monthFromDst)) {
			$this1 = DateTime_Impl_::monthStart(DateTime_Impl_::snap(DateTime_Impl_::add($utc, DTPeriod::Second($this->offsetDst)), DTSnap::Year(0)), $this->monthToDst) + 62135596800.0;
			$num = $this->wdayNumToDst;
			if ($num === null) {
				$num = 1;
			}
			return DateTime_Impl_::sub(DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayToDst, $num) + 62135596800.0, DTPeriod::Second($this->timeToDst)), DTPeriod::Second($this->offsetDst));
		} else if (($monthDst > $this->monthToDst) && ($monthDst < $this->monthFromDst)) {
			$this1 = DateTime_Impl_::monthStart(DateTime_Impl_::add($utc, DTPeriod::Second($this->offset)), $this->monthFromDst) + 62135596800.0;
			$num = $this->wdayNumFromDst;
			if ($num === null) {
				$num = 1;
			}
			return DateTime_Impl_::sub(DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayFromDst, $num) + 62135596800.0, DTPeriod::Second($this->timeFromDst)), DTPeriod::Second($this->offset));
		} else if (($month === $this->monthToDst) || ($monthDst === $this->monthToDst)) {
			$local = DateTime_Impl_::add($utc, DTPeriod::Second($this->offsetDst));
			$this1 = DateTime_Impl_::monthStart($local, $this->monthToDst) + 62135596800.0;
			$num = $this->wdayNumToDst;
			if ($num === null) {
				$num = 1;
			}
			$switchLocal = DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayToDst, $num) + 62135596800.0, DTPeriod::Second($this->timeToDst));
			if (($local - 62135596800.0) < ($switchLocal - 62135596800.0)) {
				return DateTime_Impl_::sub($switchLocal, DTPeriod::Second($this->offsetDst));
			} else {
				$local = DateTime_Impl_::add($utc, DTPeriod::Second($this->offset));
				$this1 = DateTime_Impl_::monthStart($local, $this->monthFromDst) + 62135596800.0;
				$num = $this->wdayNumFromDst;
				if ($num === null) {
					$num = 1;
				}
				$switchLocal = DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayFromDst, $num) + 62135596800.0, DTPeriod::Second($this->timeFromDst));
				return DateTime_Impl_::sub($switchLocal, DTPeriod::Second($this->offset));
			}
		} else {
			$local = DateTime_Impl_::add($utc, DTPeriod::Second($this->offset));
			$this1 = DateTime_Impl_::monthStart($local, $this->monthFromDst) + 62135596800.0;
			$num = $this->wdayNumFromDst;
			if ($num === null) {
				$num = 1;
			}
			$switchLocal = DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayFromDst, $num) + 62135596800.0, DTPeriod::Second($this->timeFromDst));
			if (($local - 62135596800.0) < ($switchLocal - 62135596800.0)) {
				return DateTime_Impl_::sub($switchLocal, DTPeriod::Second($this->offset));
			} else {
				$local = DateTime_Impl_::snap(DateTime_Impl_::add($utc, DTPeriod::Second($this->offsetDst)), DTSnap::Year(1));
				$this1 = DateTime_Impl_::monthStart($local, $this->monthToDst) + 62135596800.0;
				$num = $this->wdayNumToDst;
				if ($num === null) {
					$num = 1;
				}
				$switchLocal = DateTime_Impl_::add(DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $this->wdayToDst, $num) + 62135596800.0, DTPeriod::Second($this->timeToDst));
				return DateTime_Impl_::sub($switchLocal, DTPeriod::Second($this->offsetDst));
			}
		}
	}

	/**
	 * Get time offset at the first second of this period
	 *
	 * 
	 * @return int
	 */
	public function getStartingOffset () {
		$this1 = $this->utc;
		if (DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1)) === $this->monthToDst) {
			return $this->offsetDst;
		} else {
			return $this->offset;
		}
	}

	/**
	 * IPeriod. Get period from one time switch to another switch, which contains `utc`
	 * Does not check if `utc` is earlier than this DstRule starts
	 *
	 * 
	 * @param float $utc
	 * 
	 * @return TZPeriod
	 */
	public function getTZPeriod ($utc) {
		if (!$this->_noRequestsYet && Boot::equal(($this->_lastRequestedUtc - 62135596800.0), ($utc - 62135596800.0))) {
			return $this->_period;
		}
		$this->_noRequestsYet = false;
		$this->_lastRequestedUtc = $utc;
		$yearTime = DateTime_Impl_::add(DateTime_Impl_::snap($utc, DTSnap::Year(-1)), DTPeriod::Day(10));
		$firstSwitch = $this->estimatedSwitch($yearTime);
		$this->_period = new TZPeriod();
		if (($utc - 62135596800.0) < ($firstSwitch - 62135596800.0)) {
			$tmp = DateTime_Impl_::sub($yearTime, DTPeriod::Day(182));
			$this->_period->utc = $this->estimatedSwitch($tmp);
			$this1 = DateTime_Impl_::add($firstSwitch, DTPeriod::Second($this->offset));
			if (DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1)) === $this->monthFromDst) {
				$this->_period->isDst = true;
				$this->_period->abr = $this->abrDst;
				$this->_period->offset = $this->offsetDst;
			} else {
				$this->_period->isDst = false;
				$this->_period->abr = $this->abr;
				$this->_period->offset = $this->offset;
			}
		} else {
			$secondSwitch = $this->estimatedSwitch(DateTime_Impl_::add($firstSwitch, DTPeriod::Day(60)));
			if (($utc - 62135596800.0) < ($secondSwitch - 62135596800.0)) {
				$this->_period->utc = $firstSwitch;
				$this1 = DateTime_Impl_::add($secondSwitch, DTPeriod::Second($this->offset));
				if (DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1)) === $this->monthFromDst) {
					$this->_period->isDst = true;
					$this->_period->abr = $this->abrDst;
					$this->_period->offset = $this->offsetDst;
				} else {
					$this->_period->isDst = false;
					$this->_period->abr = $this->abr;
					$this->_period->offset = $this->offset;
				}
			} else {
				$this->_period->utc = $secondSwitch;
				$this1 = DateTime_Impl_::add($secondSwitch, DTPeriod::Second($this->offset));
				if (DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1)) === $this->monthToDst) {
					$this->_period->isDst = true;
					$this->_period->abr = $this->abrDst;
					$this->_period->offset = $this->offsetDst;
				} else {
					$this->_period->isDst = false;
					$this->_period->abr = $this->abr;
					$this->_period->offset = $this->offset;
				}
			}
		}
		return $this->_period;
	}

	/**
	 * Get string representation of this rule
	 *
	 * 
	 * @return string
	 */
	public function toString () {
		$h = (int)(($this->timeToDst / 3600));
		$m = (int)((($this->timeToDst - $h * 3600) / 60));
		$s = $this->timeToDst - $h * 3600 - $m * 60;
		$timeToDstStr = (\StringTools::lpad("" . ($h??'null') . ":", "0", 3)??'null') . (\StringTools::lpad("" . ($m??'null') . ":", "0", 3)??'null') . (\StringTools::lpad("" . ($s??'null'), "0", 2)??'null');
		$h = (int)(($this->timeFromDst / 3600));
		$m = (int)((($this->timeFromDst - $h * 3600) / 60));
		$s = $this->timeFromDst - $h * 3600 - $m * 60;
		$timeFromDstStr = (\StringTools::lpad("" . ($h??'null') . ":", "0", 3)??'null') . (\StringTools::lpad("" . ($m??'null') . ":", "0", 3)??'null') . (\StringTools::lpad("" . ($s??'null'), "0", 2)??'null');
		return "{ offsetDst => " . ($this->offsetDst??'null') . ", timeToDst => " . ($timeToDstStr??'null') . ", timeFromDst => " . ($timeFromDstStr??'null') . ", offset => " . ($this->offset??'null') . ", monthFromDst => " . ($this->monthFromDst??'null') . ", monthToDst => " . ($this->monthToDst??'null') . ", abr => " . ($this->abr??'null') . ", utc => " . ((($this->utc === null ? "null" : DateTime_Impl_::toString($this->utc)))??'null') . ", abrDst => " . ($this->abrDst??'null') . ", wdayNumFromDst => " . ($this->wdayNumFromDst??'null') . ", wdayFromDst => " . ($this->wdayFromDst??'null') . ", wdayNumToDst => " . ($this->wdayNumToDst??'null') . ", wdayToDst => " . ($this->wdayToDst??'null') . " }";
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(DstRule::class, 'datetime.utils.pack.DstRule');
