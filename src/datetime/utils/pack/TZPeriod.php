<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace datetime\utils\pack;

use \php\Boot;
use \datetime\_DateTime\DateTime_Impl_;

/**
 * Period between two time changes in one zone.
 *
 * Each line from zdump can be represented by this structure
 */
class TZPeriod implements IPeriod {
	/**
	 * @var string
	 * Timezone abbreviation in effect during this offset
	 */
	public $abr;
	/**
	 * @var bool
	 * Whether this period is Daylight Saving Time
	 */
	public $isDst;
	/**
	 * @var int
	 * Time offset in seconds relative to utc
	 */
	public $offset;
	/**
	 * @var float
	 * utc time to switch to new time offset
	 */
	public $utc;

	/**
	 * Constructor
	 *
	 * 
	 * @return void
	 */
	public function __construct () {
	}

	/**
	 * Get time offset at the first second of this period
	 *
	 * 
	 * @return int
	 */
	public function getStartingOffset () {
		return $this->offset;
	}

	/**
	 * IPeriod. Get period from one time switch to another switch, which contains `utc`
	 *
	 * 
	 * @param float $utc
	 * 
	 * @return TZPeriod
	 */
	public function getTZPeriod ($utc) {
		return $this;
	}

	/**
	 * Get string representation of this period
	 *
	 * 
	 * @return string
	 */
	public function toString () {
		return "{ isDst => " . ((($this->isDst ? "true" : "false"))??'null') . (", offset => " . ($this->offset??'null') . ", abr => " . ($this->abr??'null') . ", utc => \"" . ((($this->utc === null ? "null" : DateTime_Impl_::toString($this->utc)))??'null') . "\" }");
	}

	public function __toString() {
		return $this->toString();
	}
}

Boot::registerClass(TZPeriod::class, 'datetime.utils.pack.TZPeriod');
