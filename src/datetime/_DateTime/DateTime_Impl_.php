<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace datetime\_DateTime;

use \php\Boot;
use \datetime\utils\DateTimeMonthUtils;
use \datetime\cores\DateTimeIntervalCore;
use \datetime\utils\DateTimeUtils;
use \datetime\utils\DateTimeSnapUtils;
use \datetime\_DateTimeInterval\DateTimeInterval_Impl_;
use \datetime\DTSnap;
use \datetime\DTPeriod;

final class DateTime_Impl_ {
	/**
	 * @var float
	 * normal year + normal year + leap year
	 */
	const SECONDS_IN_3_PART_QUAD = 94694400.0;
	/**
	 * @var int
	 * 3 normal years
	 */
	const SECONDS_IN_3_YEARS = 94608000;
	/**
	 * @var float
	 * seconds in century, where the last (xx00-year) is not leap
	 */
	const SECONDS_IN_CENTURY = 3155673600.0;
	/**
	 * @var float
	 * 4 centuries, where the last century is leap (last year is leap), while others are not
	 */
	const SECONDS_IN_CQUAD = 12622780800.0;
	/**
	 * @var int
	 */
	const SECONDS_IN_DAY = 86400;
	/**
	 * @var float
	 * normal year + normal year
	 */
	const SECONDS_IN_HALF_QUAD = 63072000.0;
	/**
	 * @var float
	 * normal year + leap year
	 */
	const SECONDS_IN_HALF_QUAD_LEAP = 63158400.0;
	/**
	 * @var int
	 */
	const SECONDS_IN_HOUR = 3600;
	/**
	 * @var float
	 * seconds in century, where the last (xx00-year) is leap
	 */
	const SECONDS_IN_LEAP_CENTURY = 3155760000.0;
	/**
	 * @var int
	 */
	const SECONDS_IN_LEAP_YEAR = 31622400;
	/**
	 * @var int
	 */
	const SECONDS_IN_MINUTE = 60;
	/**
	 * @var float
	 * Amount of seconds in 4 years (3 normal years + 1 leap year)
	 */
	const SECONDS_IN_QUAD = 126230400.0;
	/**
	 * @var int
	 */
	const SECONDS_IN_WEEK = 604800;
	/**
	 * @var int
	 */
	const SECONDS_IN_YEAR = 31536000;
	/**
	 * @var float
	 * Difference bitween unix epoch and internal number of seconds
	 */
	const UNIX_EPOCH_DIFF = 62135596800.0;

	/**
	 * Constructor
	 *
	 * @param time - unix timestamp (amount of seconds since `1970-01-01 00:00:00`)
	 * 
	 * @param float $time
	 * 
	 * @return float
	 */
	public static function _new ($time) {
		return $time + 62135596800.0;
	}

	/**
	 * Add time period to this timestamp.
	 * Returns new DateTime.
	 * 
	 * @param float $this
	 * @param DTPeriod $period
	 * 
	 * @return float
	 */
	public static function add ($this1, $period) {
		$time = null;
		$__hx__switch = ($period->index);
		if ($__hx__switch === 0) {
			$time = DateTimeUtils::addYear($this1 - 62135596800.0 + 62135596800.0, $period->params[0]);
		} else if ($__hx__switch === 1) {
			$time = DateTimeUtils::addMonth($this1 - 62135596800.0 + 62135596800.0, $period->params[0]);
		} else if ($__hx__switch === 2) {
			$time = $this1 - 62135596800.0 + $period->params[0] * 86400;
		} else if ($__hx__switch === 3) {
			$time = $this1 - 62135596800.0 + $period->params[0] * 3600;
		} else if ($__hx__switch === 4) {
			$time = $this1 - 62135596800.0 + $period->params[0] * 60;
		} else if ($__hx__switch === 5) {
			$time = $this1 - 62135596800.0 + $period->params[0];
		} else if ($__hx__switch === 6) {
			$time = $this1 - 62135596800.0 + $period->params[0] * 7 * 86400;
		}
		return $time + 62135596800.0;
	}

	/**
	 * Get amount of days in specified `month` (1-12). If `month` is 2 (February), you need to
	 * specify whether you want to get amount of days in leap year or not.
	 * 
	 * @param int $month
	 * @param bool $isLeapYear
	 * 
	 * @return int
	 */
	public static function daysInMonth ($month, $isLeapYear = false) {
		if ($isLeapYear === null) {
			$isLeapYear = false;
		}
		return DateTimeMonthUtils::days($month, $isLeapYear);
	}

	/**
	 * Return amount of days in current month
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function daysInThisMonth ($this1) {
		$month = DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
		return DateTimeMonthUtils::days($month, ($month === 2) && DateTime_Impl_::isLeapYear($this1));
	}

	/**
	 * Operator overloading for simple usage of DateTimeInterval
	 *
	 * 
	 * @param float $this
	 * @param float $begin
	 * 
	 * @return DateTimeIntervalCore
	 */
	public static function dtiCreate ($this1, $begin) {
		return DateTimeInterval_Impl_::create($begin, $this1 - 62135596800.0 + 62135596800.0);
	}

	/**
	 * @param float $this
	 * @param DateTimeIntervalCore $dti
	 * 
	 * @return float
	 */
	public static function dtiMinus ($this1, $dti) {
		return DateTimeInterval_Impl_::subFrom($dti, $this1 - 62135596800.0 + 62135596800.0);
	}

	/**
	 * @param float $this
	 * @param DateTimeIntervalCore $dti
	 * 
	 * @return float
	 */
	public static function dtiMinus2 ($this1, $dti) {
		$this1 = DateTimeInterval_Impl_::subFrom($dti, $this1 - 62135596800.0 + 62135596800.0) - 62135596800.0 + 62135596800.0;
		return $this1 + 62135596800.0;
	}

	/**
	 * @param float $this
	 * @param DateTimeIntervalCore $dti
	 * 
	 * @return float
	 */
	public static function dtiPlus1 ($this1, $dti) {
		return DateTimeInterval_Impl_::addTo($dti, $this1 - 62135596800.0 + 62135596800.0);
	}

	/**
	 * @param float $this
	 * @param DateTimeIntervalCore $dti
	 * 
	 * @return float
	 */
	public static function dtiPlus2 ($this1, $dti) {
		return DateTimeInterval_Impl_::addTo($dti, $this1 - 62135596800.0 + 62135596800.0);
	}

	/**
	 * @param float $this
	 * @param DateTimeIntervalCore $dti
	 * 
	 * @return float
	 */
	public static function dtiPlus3 ($this1, $dti) {
		$this1 = DateTimeInterval_Impl_::addTo($dti, $this1 - 62135596800.0 + 62135596800.0) - 62135596800.0 + 62135596800.0;
		return $this1 + 62135596800.0;
	}

	/**
	 * @param float $this
	 * @param float $dt
	 * 
	 * @return bool
	 */
	public static function eq ($this1, $dt) {
		return Boot::equal(($this1 - 62135596800.0), ($dt - 62135596800.0));
	}

	/**
	 * Format this timestamp according to `format`
	 *
	 * Day
	 *
	 *   - `%d`  Two-digit day of the month (with leading zeros) 01 to 31
	 *   - `%e`  Day of the month, with a space preceding single digits. 1 to 31
	 *   - `%j`  Day of the year, 3 digits with leading zeros    001 to 366
	 *   - `%u`  ISO-8601 numeric representation of the day of the week  1 (for Monday) though 7 (for Sunday)
	 *   - `%w`  Numeric representation of the day of the week   0 (for Sunday) through 6 (for Saturday)
	 *
	 * Month
	 *
	 *   - `%m`  Two digit representation of the month   01 (for January) through 12 (for December)
	 *
	 * Year
	 *
	 *   - `%C`  Two digit representation of the century (year divided by 100, truncated to an integer)  19 for the 20th Century
	 *   - `%y`  Two digit representation of the year    Example: 09 for 2009, 79 for 1979
	 *   - `%Y`  Four digit representation for the year  Example: 2038
	 *
	 * Week
	 *
	 *   - `%V`  ISO-8601:1988 week number of the given year, starting with the first week of the year with at least 4 weekdays,
	 *   -     with Monday being the start of the week 01 through 53
	 *
	 * Time
	 *
	 *   - `%H`  Two digit representation of the hour in 24-hour format  00 through 23
	 *   - `%k`  Two digit representation of the hour in 24-hour format, with a space preceding single digits    0 through 23
	 *   - `%I`  Two digit representation of the hour in 12-hour format  01 through 12
	 *   - `%l`  (lower-case 'L') Hour in 12-hour format, with a space preceding single digits    1 through 12
	 *   - `%M`  Two digit representation of the minute  00 through 59
	 *   - `%p`  upper-case 'AM' or 'PM' based on the given time Example: AM for 00:31, PM for 22:23
	 *   - `%P`  lower-case 'am' or 'pm' based on the given time Example: am for 00:31, pm for 22:23
	 *   - `%r`  Same as "%I:%M:%S %p"   Example: 09:34:17 PM for 21:34:17
	 *   - `%R`  Same as "%H:%M" Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
	 *   - `%S`  Two digit representation of the second  00 through 59
	 *   - `%T`  Same as "%H:%M:%S"  Example: 21:34:17 for 09:34:17 PM
	 *
	 * Time and Date Stamps
	 *
	 *   - `%D`  Same as "%m/%d/%y"  Example: 02/05/09 for February 5, 2009
	 *   - `%F`  Same as "%Y-%m-%d" (commonly used in database datestamps)   Example: 2009-02-05 for February 5, 2009
	 *   - `%s`  Unix Epoch Time timestamp Example: 305815200 for September 10, 1979 08:40:00 AM
	 *
	 * Miscellaneous
	 *
	 *   - `%%`  A literal percentage character ("%")
	 * 
	 * @param float $this
	 * @param string $format
	 * 
	 * @return string
	 */
	public static function format ($this1, $format) {
		return DateTimeUtils::strftime($this1 - 62135596800.0 + 62135596800.0, $format);
	}

	/**
	 * Make DateTime instance using unix timestamp retreived from `date`
	 *
	 * Returns UTC time.
	 * 
	 * @param \Date $date
	 * 
	 * @return float
	 */
	public static function fromDate ($date) {
		return \floor($date->getTime() / 1000) + 62135596800.0;
	}

	/**
	 * Convert 'YYYY-MM-DD hh:mm:ss' or 'YYYY-MM-DD' or 'YYYY-MM-DDThh:mm:ss[.SSS]Z' to DateTime
	 *
	 * Assumes provided string represents UTC time.
	 *
	 * Returns UTC time.
	 *
	 * @throws String - if provided string is not in correct format
	 * 
	 * @param string $str
	 * 
	 * @return float
	 */
	public static function fromString ($str) {
		return DateTimeUtils::fromString($str);
	}

	/**
	 * Make DateTime from unix timestamp (amount of seconds)
	 *
	 * Returns UTC time.
	 * 
	 * @param float $time
	 * 
	 * @return float
	 */
	public static function fromTime ($time) {
		return $time + 62135596800.0;
	}

	/**
	 * Create standart `Date` class instance using unix timestamp of this one
	 *
	 * 
	 * @param float $this
	 * 
	 * @return \Date
	 */
	public static function getDate ($this1) {
		return \Date::fromTime(($this1 - 62135596800.0) * 1000);
	}

	/**
	 * Get day number (1-31)
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function getDay ($this1) {
		return DateTimeMonthUtils::getMonthDay((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
	}

	/**
	 * Get hour number (0-23)
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function getHour ($this1) {
		return (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
	}

	/**
	 * Get hour number in 12-hour-clock
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function getHour12 ($this1) {
		$hour = (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
		if ($hour === 0) {
			return 12;
		} else if ($hour > 12) {
			return $hour - 12;
		} else {
			return $hour;
		}
	}

	/**
	 * Get current local time offset (in seconds) relative to UTC time.
	 *
	 * 
	 * @return int
	 */
	public static function getLocalOffset () {
		$now = \Date::now();
		$year = $now->getFullYear();
		$month = $now->getMonth() + 1;
		$day = $now->getDate();
		$hour = $now->getHours();
		$minute = $now->getMinutes();
		$second = $now->getSeconds();
		if ($second === null) {
			$second = 0;
		}
		if ($minute === null) {
			$minute = 0;
		}
		if ($hour === null) {
			$hour = 0;
		}
		if ($day === null) {
			$day = 1;
		}
		if ($month === null) {
			$month = 1;
		}
		if ($year === null) {
			$year = 1970;
		}
		return (int)((DateTimeUtils::yearToStamp($year) + DateTimeMonthUtils::toSeconds($month, (($year % 4) === 0) && ((($year % 100) === 0 ? ($year % 400) === 0 : true))) + ($day - 1) * 86400 + $hour * 3600 + $minute * 60 + $second - 62135596800.0 + 62135596800.0 - 62135596800.0 - (int)(($now->getTime() / 1000))));
	}

	/**
	 * Get minumte number (0-59)
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function getMinute ($this1) {
		return (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
	}

	/**
	 * Get month number (1-12)
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function getMonth ($this1) {
		return DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
	}

	/**
	 * Get date/time of the first second of specified `month`.
	 *
	 * 
	 * @param float $this
	 * @param int $month
	 * 
	 * @return float
	 */
	public static function getMonthStart ($this1, $month) {
		return DateTime_Impl_::monthStart($this1, $month) + 62135596800.0;
	}

	/**
	 * Get second number (0-59)
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function getSecond ($this1) {
		return (int)(($this1 - \floor($this1 / 60) * 60));
	}

	/**
	 * Get unix timestamp (amount of seconds)
	 *
	 * 
	 * @param float $this
	 * 
	 * @return float
	 */
	public static function getTime ($this1) {
		return $this1 - 62135596800.0;
	}

	/**
	 * Get current week number within a year according to the ISO 8601 date and time standard
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function getWeek ($this1) {
		$week = (int)((((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1 - DateTime_Impl_::getWeekDay($this1, true) + 10) / 7));
		$year = DateTime_Impl_::getYear($this1);
		if ($week < 1) {
			return DateTime_Impl_::weeksInYear($year - 1);
		} else if (($week > 52) && ($week > DateTime_Impl_::weeksInYear($year))) {
			return 1;
		} else {
			return $week;
		}
	}

	/**
	 * Get day of the week.
	 *
	 * Returns 0-6 (Sunday-Saturday) by default.
	 *
	 * Returns 1-7 (Monday-Sunday) if `mondayBased` = true
	 *
	 * 
	 * @param float $this
	 * @param bool $mondayBased
	 * 
	 * @return int
	 */
	public static function getWeekDay ($this1, $mondayBased = false) {
		if ($mondayBased === null) {
			$mondayBased = false;
		}
		$month = DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
		$a = (int)(((14 - $month) / 12));
		$y = DateTime_Impl_::getYear($this1) - $a;
		$weekDay = (7000 + (DateTimeMonthUtils::getMonthDay((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1)) + $y + (int)(($y / 4)) - (int)(($y / 100)) + (int)(($y / 400)) + (int)((31 * ($month + 12 * $a - 2) / 12)))) % 7;
		if ($mondayBased && ($weekDay === 0)) {
			return 7;
		} else {
			return $weekDay;
		}
	}

	/**
	 * Get DateTime of a specified `weekDay` in this month, which is the `num`st in current month.
	 *
	 *   E.g. get DateTime of the second Sunday in current month.
	 *   If `num` is negative, then required `weekDay` will be searched from the end of this month.
	 *   If `num` == 0, returns a copy of this DateTime instance
	 * 
	 * @param float $this
	 * @param int $weekDay
	 * @param int $num
	 * 
	 * @return float
	 */
	public static function getWeekDayNum ($this1, $weekDay, $num = 1) {
		if ($num === null) {
			$num = 1;
		}
		return DateTimeUtils::getWeekDayNum($this1 - 62135596800.0 + 62135596800.0, $weekDay, $num) + 62135596800.0;
	}

	/**
	 * Get year number (4 digits)
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function getYear ($this1) {
		$cquads = (int)(($this1 / 12622780800.0)) * 12622780800.0;
		$centuries = (int)((($this1 - $cquads) / 3155673600.0)) * 3155673600.0;
		if ($centuries > 9467020800.) {
			$centuries -= 3155673600.0;
		}
		$quads = (int)((($this1 - $cquads - $centuries) / 126230400.0)) * 126230400.0;
		$years = (int)((($this1 - $cquads - $centuries - $quads) / 31536000));
		return (int)(($cquads / 12622780800.0)) * 400 + (int)(($centuries / 3155673600.0)) * 100 + (int)(($quads / 126230400.0)) * 4 + (($years === 4 ? $years : $years + 1));
	}

	/**
	 * Get day number within a year (1-366)
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function getYearDay ($this1) {
		return (int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1;
	}

	/**
	 * DateTime comparison
	 *
	 * 
	 * @param float $this
	 * @param float $dt
	 * 
	 * @return bool
	 */
	public static function gt ($this1, $dt) {
		return ($this1 - 62135596800.0) > ($dt - 62135596800.0);
	}

	/**
	 * @param float $this
	 * @param float $dt
	 * 
	 * @return bool
	 */
	public static function gte ($this1, $dt) {
		return ($this1 - 62135596800.0) >= ($dt - 62135596800.0);
	}

	/**
	 * Check if specified `year` is a leap year
	 *
	 * 
	 * @param int $year
	 * 
	 * @return bool
	 */
	public static function isLeap ($year) {
		if (($year % 4) === 0) {
			if (($year % 100) === 0) {
				return ($year % 400) === 0;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}

	/**
	 * Check if this is leap year
	 *
	 * 
	 * @param float $this
	 * 
	 * @return bool
	 */
	public static function isLeapYear ($this1) {
		$year = DateTime_Impl_::getYear($this1);
		if (($year % 4) === 0) {
			if (($year % 100) === 0) {
				return ($year % 400) === 0;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}

	/**
	 * Get current local date&time.
	 *
	 * Returns user's local date/time.
	 * 
	 * @return float
	 */
	public static function local () {
		return time() + 62135596800.0 - 62135596800.0 + DateTime_Impl_::getLocalOffset() + 62135596800.0;
	}

	/**
	 * @param float $this
	 * @param float $dt
	 * 
	 * @return bool
	 */
	public static function lt ($this1, $dt) {
		return ($this1 - 62135596800.0) < ($dt - 62135596800.0);
	}

	/**
	 * @param float $this
	 * @param float $dt
	 * 
	 * @return bool
	 */
	public static function lte ($this1, $dt) {
		return ($this1 - 62135596800.0) <= ($dt - 62135596800.0);
	}

	/**
	 * Build DateTime using specified components
	 *
	 * Builds UTC time.
	 *
	 * @param year
	 * @param month  - 1-12
	 * @param day    - 1-31
	 * @param hour   - 0-23
	 * @param minute - 0-59
	 * @param second - 0-59
	 * 
	 * @param int $year
	 * @param int $month
	 * @param int $day
	 * @param int $hour
	 * @param int $minute
	 * @param int $second
	 * 
	 * @return float
	 */
	public static function make ($year = 1970, $month = 1, $day = 1, $hour = 0, $minute = 0, $second = 0) {
		if ($year === null) {
			$year = 1970;
		}
		if ($month === null) {
			$month = 1;
		}
		if ($day === null) {
			$day = 1;
		}
		if ($hour === null) {
			$hour = 0;
		}
		if ($minute === null) {
			$minute = 0;
		}
		if ($second === null) {
			$second = 0;
		}
		return DateTimeUtils::yearToStamp($year) + DateTimeMonthUtils::toSeconds($month, (($year % 4) === 0) && ((($year % 100) === 0 ? ($year % 400) === 0 : true))) + ($day - 1) * 86400 + $hour * 3600 + $minute * 60 + $second - 62135596800.0 + 62135596800.0;
	}

	/**
	 * @param float $this
	 * @param DTPeriod $period
	 * 
	 * @return float
	 */
	public static function mathMinus1 ($this1, $period) {
		return DateTime_Impl_::sub($this1, $period);
	}

	/**
	 * @param float $this
	 * @param DTPeriod $period
	 * 
	 * @return float
	 */
	public static function mathMinus2 ($this1, $period) {
		$this1 = DateTime_Impl_::sub($this1, $period) - 62135596800.0 + 62135596800.0;
		return $this1 + 62135596800.0;
	}

	/**
	 * Operator overloading for simple writing `.add()` method
	 *
	 * 
	 * @param float $this
	 * @param DTPeriod $period
	 * 
	 * @return float
	 */
	public static function mathPlus1 ($this1, $period) {
		return DateTime_Impl_::add($this1, $period);
	}

	/**
	 * @param float $this
	 * @param DTPeriod $period
	 * 
	 * @return float
	 */
	public static function mathPlus2 ($this1, $period) {
		return DateTime_Impl_::add($this1, $period);
	}

	/**
	 * @param float $this
	 * @param DTPeriod $period
	 * 
	 * @return float
	 */
	public static function mathPlus3 ($this1, $period) {
		$this1 = DateTime_Impl_::add($this1, $period) - 62135596800.0 + 62135596800.0;
		return $this1 + 62135596800.0;
	}

	/**
	 * Get unix timestamp of the first second for specified `month` in this year (1-12)
	 *
	 * If `month` == 0, returns timestamp of current month of this DateTime instance.
	 *
	 * 
	 * @param float $this
	 * @param int $month
	 * 
	 * @return float
	 */
	public static function monthStart ($this1, $month = 0) {
		if ($month === null) {
			$month = 0;
		}
		if ($month === 0) {
			$month = DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
		}
		return DateTime_Impl_::yearStart($this1) + DateTimeMonthUtils::toSeconds($month, DateTime_Impl_::isLeapYear($this1));
	}

	/**
	 * @param float $this
	 * @param float $dt
	 * 
	 * @return bool
	 */
	public static function neq ($this1, $dt) {
		return !Boot::equal(($this1 - 62135596800.0), ($dt - 62135596800.0));
	}

	/**
	 * Get current UTC date&time
	 *
	 * 
	 * @return float
	 */
	public static function now () {
		return time() + 62135596800.0;
	}

	/**
	 * Snap to nearest year, month, day, hour, minute, second or week.
	 * Returns new DateTime.
	 * 
	 * @param float $this
	 * @param DTSnap $period
	 * 
	 * @return float
	 */
	public static function snap ($this1, $period) {
		$time = null;
		$__hx__switch = ($period->index);
		if ($__hx__switch === 0) {
			$time = DateTimeSnapUtils::snapYear($this1 - 62135596800.0 + 62135596800.0, $period->params[0]);
		} else if ($__hx__switch === 1) {
			$time = DateTimeSnapUtils::snapMonth($this1 - 62135596800.0 + 62135596800.0, $period->params[0]);
		} else if ($__hx__switch === 2) {
			$time = DateTimeSnapUtils::snapDay($this1 - 62135596800.0 + 62135596800.0, $period->params[0]);
		} else if ($__hx__switch === 3) {
			$time = DateTimeSnapUtils::snapHour($this1 - 62135596800.0 + 62135596800.0, $period->params[0]);
		} else if ($__hx__switch === 4) {
			$time = DateTimeSnapUtils::snapMinute($this1 - 62135596800.0 + 62135596800.0, $period->params[0]);
		} else if ($__hx__switch === 5) {
			$time = ($period->params[0] === 1 ? $this1 - 62135596800.0 + 1 : $this1 - 62135596800.0);
		} else if ($__hx__switch === 6) {
			$time = DateTimeSnapUtils::snapWeek($this1 - 62135596800.0 + 62135596800.0, $period->params[0], $period->params[1]);
		}
		return $time + 62135596800.0;
	}

	/**
	 * Substruct time period from this timestamp.
	 * This method is used for operator overloading.
	 * 
	 * @param float $this
	 * @param DTPeriod $period
	 * 
	 * @return float
	 */
	public static function sub ($this1, $period) {
		$time = null;
		$__hx__switch = ($period->index);
		if ($__hx__switch === 0) {
			$time = DateTimeUtils::addYear($this1 - 62135596800.0 + 62135596800.0, -$period->params[0]);
		} else if ($__hx__switch === 1) {
			$time = DateTimeUtils::addMonth($this1 - 62135596800.0 + 62135596800.0, -$period->params[0]);
		} else if ($__hx__switch === 2) {
			$time = $this1 - 62135596800.0 - $period->params[0] * 86400;
		} else if ($__hx__switch === 3) {
			$time = $this1 - 62135596800.0 - $period->params[0] * 3600;
		} else if ($__hx__switch === 4) {
			$time = $this1 - 62135596800.0 - $period->params[0] * 60;
		} else if ($__hx__switch === 5) {
			$time = $this1 - 62135596800.0 - $period->params[0];
		} else if ($__hx__switch === 6) {
			$time = $this1 - 62135596800.0 - $period->params[0] * 7 * 86400;
		}
		return $time + 62135596800.0;
	}

	/**
	 * Convert to string representation in format YYYY-MM-DD HH:MM:SS
	 *
	 * 
	 * @param float $this
	 * 
	 * @return string
	 */
	public static function toString ($this1) {
		$Y = DateTime_Impl_::getYear($this1);
		$M = DateTimeMonthUtils::getMonth((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
		$D = DateTimeMonthUtils::getMonthDay((int)((($this1 - 62135596800.0 - DateTime_Impl_::yearStart($this1)) / 86400)) + 1, DateTime_Impl_::isLeapYear($this1));
		$h = (int)((($this1 - \floor($this1 / 86400) * 86400) / 3600));
		$m = (int)((($this1 - \floor($this1 / 3600) * 3600) / 60));
		$s = (int)(($this1 - \floor($this1 / 60) * 60));
		return "" . ($Y??'null') . "-" . ((($M < 10 ? "0" . ($M??'null') : "" . ($M??'null')))??'null') . "-" . ((($D < 10 ? "0" . ($D??'null') : "" . ($D??'null')))??'null') . " " . ((($h < 10 ? "0" . ($h??'null') : "" . ($h??'null')))??'null') . ":" . ((($m < 10 ? "0" . ($m??'null') : "" . ($m??'null')))??'null') . ":" . ((($s < 10 ? "0" . ($s??'null') : "" . ($s??'null')))??'null');
	}

	/**
	 * Assuming this instance is your local time, convert it ot UTC using current
	 * time offset of your timezone.
	 *
	 * Does not use your timezone data, just current time offset.
	 *
	 * If you dont care about your timezone and just need to convert your local time to utc,
	 * use this method instead of `Timezone` class.
	 *
	 * Returns new DateTime instance
	 * 
	 * @param float $this
	 * 
	 * @return float
	 */
	public static function utc ($this1) {
		return $this1 - 62135596800.0 - DateTime_Impl_::getLocalOffset() + 62135596800.0;
	}

	/**
	 * Get amount of weeks in this year (52 or 53)
	 *
	 * 
	 * @param float $this
	 * 
	 * @return int
	 */
	public static function weeksInThisYear ($this1) {
		return DateTime_Impl_::weeksInYear(DateTime_Impl_::getYear($this1));
	}

	/**
	 * Get amount of weeks in `year` (52 or 53)
	 *
	 * 
	 * @param int $year
	 * 
	 * @return int
	 */
	public static function weeksInYear ($year) {
		$start = DateTimeUtils::yearToStamp($year) - 62135596800.0 + 62135596800.0;
		$weekDay = DateTime_Impl_::getWeekDay($start);
		if (($weekDay === 4) || (($weekDay === 3) && DateTime_Impl_::isLeapYear($start))) {
			return 53;
		} else {
			return 52;
		}
	}

	/**
	 * Get unix timestamp of a first second of this year
	 *
	 * 
	 * @param float $this
	 * 
	 * @return float
	 */
	public static function yearStart ($this1) {
		$cquads = (int)(($this1 / 12622780800.0)) * 12622780800.0;
		$centuries = (int)((($this1 - $cquads) / 3155673600.0)) * 3155673600.0;
		if ($centuries > 9467020800.) {
			$centuries -= 3155673600.0;
		}
		$quads = (int)((($this1 - $cquads - $centuries) / 126230400.0)) * 126230400.0;
		$years = (int)((($this1 - $cquads - $centuries - $quads) / 31536000));
		if ($years === 4) {
			--$years;
		}
		return $cquads + $centuries + $quads + $years * 31536000 - 62135596800.0;
	}
}

Boot::registerClass(DateTime_Impl_::class, 'datetime._DateTime.DateTime_Impl_');
