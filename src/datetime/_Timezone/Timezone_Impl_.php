<?php
/**
 * Generated by Haxe 4.1.4
 */

namespace datetime\_Timezone;

use \php\Boot;
use \datetime\data\TimezoneData;
use \datetime\utils\TimezoneUtils;
use \datetime\utils\TimezoneDetect;

final class Timezone_Impl_ {
	/**
	 * @var TimezoneData
	 * cache for local timezone
	 */
	static public $_local = null;

	/**
	 * Constructor
	 *
	 * 
	 * @param TimezoneData $tz
	 * 
	 * @return TimezoneData
	 */
	public static function _new ($tz) {
		return $tz;
	}

	/**
	 * Find out what was the date/time at specified UTC time in this timezone
	 *
	 * E.g.
	 *
	 *   `var utc = DateTime.fromString('2012-01-01 00:00:00');`
	 *
	 *   `var tz = Timezone.get('Europe/Moscow');`
	 *
	 *   `tz.at(utc).toString();  // 2012-01-01 04:00:00`
	 * 
	 * @param TimezoneData $this
	 * @param float $utc
	 * 
	 * @return float
	 */
	public static function at ($this1, $utc) {
		return $utc - 62135596800.0 + $this1->getPeriodForUtc($utc)->offset + 62135596800.0;
	}

	/**
	 * Make a string according to `format`.
	 *
	 *   - `%z`  The time zone offset. Example: -0500 for US Eastern Time
	 *   - `%Z`  The time zone abbreviation. Example: EST for Eastern Standart Time
	 *   - `%q`  ISO8691 date/time format. Example: 2014-10-04T19:42:56+00:00
	 *
	 * After timezone placeholders in `format` are processed `at(utc).format(format)` is called.
	 * 
	 * @param TimezoneData $this
	 * @param float $utc
	 * @param string $format
	 * 
	 * @return string
	 */
	public static function format ($this1, $utc, $format) {
		return TimezoneUtils::format($this1, $utc, $format);
	}

	/**
	 * Get timezone by IANA timezone name
	 *
	 * 
	 * @param string $name
	 * 
	 * @return TimezoneData
	 */
	public static function get ($name) {
		return TimezoneData::get($name);
	}

	/**
	 * Get timezone abbreviation at specified moment. E.g. EST for Eastern Standart Time
	 *
	 * 
	 * @param TimezoneData $this
	 * @param float $utc
	 * 
	 * @return string
	 */
	public static function getAbbreviation ($this1, $utc) {
		return $this1->getPeriodForUtc($utc)->abr;
	}

	/**
	 * Get time offset relative to UTC time at specified moment in HHMM format.
	 *
	 * 
	 * @param TimezoneData $this
	 * @param float $utc
	 * 
	 * @return int
	 */
	public static function getHHMM ($this1, $utc) {
		$offset = $this1->getPeriodForUtc($utc)->offset;
		$hours = (int)(($offset / 3600));
		return $hours * 100 + (int)((($offset - $hours * 3600) / 60));
	}

	/**
	 * Get timezone name
	 *
	 * 
	 * @param TimezoneData $this
	 * 
	 * @return string
	 */
	public static function getName ($this1) {
		return $this1->name;
	}

	/**
	 * Get time offset relative to UTC time at specified moment.
	 *   Returns amount of seconds.
	 * 
	 * @param TimezoneData $this
	 * @param float $utc
	 * 
	 * @return int
	 */
	public static function getOffset ($this1, $utc) {
		return $this1->getPeriodForUtc($utc)->offset;
	}

	/**
	 * Build available timezones list
	 *
	 * 
	 * @return \Array_hx
	 */
	public static function getZonesList () {
		return TimezoneData::zonesList();
	}

	/**
	 * Check if Daylight Saving time is in effect in this zone at `utc` time
	 *
	 * 
	 * @param TimezoneData $this
	 * @param float $utc
	 * 
	 * @return bool
	 */
	public static function isDst ($this1, $utc) {
		return $this1->getPeriodForUtc($utc)->isDst;
	}

	/**
	 * Set/overwrite existing timezone database with data loaded from external source.
	 * Use this method if you load timezone database from external source at runtime.
	 * You can compile with `-D EXTERNAL_TZ_DB` to avoid embedding timezone databaze at compile time.
	 * 
	 * @param string $data
	 * 
	 * @return void
	 */
	public static function loadData ($data) {
		TimezoneData::loadData($data);
	}

	/**
	 * Get local timezone on current machine.
	 * If timezone cannot be detected, returns UTC zone
	 *
	 * 
	 * @return TimezoneData
	 */
	public static function local () {
		if (Timezone_Impl_::$_local === null) {
			Timezone_Impl_::$_local = TimezoneData::get(TimezoneDetect::detect());
			if (Timezone_Impl_::$_local === null) {
				Timezone_Impl_::$_local = TimezoneData::get("UTC");
			}
		}
		return Timezone_Impl_::$_local;
	}

	/**
	 * Description
	 *
	 * 
	 * @param TimezoneData $this
	 * 
	 * @return string
	 */
	public static function toString ($this1) {
		return $this1->name;
	}

	/**
	 * Convert `local` time in this timezone to utc
	 *
	 * 
	 * @param TimezoneData $this
	 * @param float $local
	 * 
	 * @return float
	 */
	public static function utc ($this1, $local) {
		return $local - 62135596800.0 - $this1->getPeriodForLocal($local)->offset + 62135596800.0;
	}
}

Boot::registerClass(Timezone_Impl_::class, 'datetime._Timezone.Timezone_Impl_');
